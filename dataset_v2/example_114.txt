```python
import torch
from torch import nn
from torch.cuda.amp import custom_bwd, custom_fwd

@custom_fwd(cast_inputs=torch.bfloat16)
def fused_gelu_rfft_bf16(x: torch.Tensor, weight: torch.Tensor) -> torch.Tensor:
    """
    Fused GELU activation, complex-valued FFT, and matrix multiplication.
    """
    # GELU activation (fused with bfloat16)
    gelu = x * torch.sigmoid(1.702 * x)

    # Complex-valued FFT
    rfft = torch.fft.rfft(gelu, dim=-1)

    # Matrix multiplication (using bf16)
    output = torch.matmul(rfft, weight.to(torch.bfloat16).t())

    return output.to(torch.float32)


@custom_bwd
def fused_gelu_rfft_bf16_backward(ctx, grad_output):
    """
    Backward pass for fused_gelu_rfft_bf16.
    """
    x, weight = ctx.inputs
    rfft = torch.fft.rfft(x.to(torch.bfloat16) * torch.sigmoid(1.702 * x.to(torch.bfloat16)), dim=-1)

    # Gradient computation
    grad_weight = torch.matmul(grad_output.to(torch.bfloat16), rfft.conj().t())
    grad_x = torch.fft.irfft(torch.matmul(grad_output.to(torch.bfloat16), weight.to(torch.bfloat16)), dim=-1) * \
             (1.702 * x.to(torch.bfloat16) * torch.sigmoid(1.702 * x.to(torch.bfloat16)) * (1 - torch.sigmoid(1.702 * x.to(torch.bfloat16))) + \
             torch.sigmoid(1.702 * x.to(torch.bfloat16)))

    return grad_x.to(torch.float32), grad_weight.to(torch.float32)


function_signature = {
    "name": "fused_gelu_rfft_bf16",
    "inputs": [
        ((8, 16, 32), torch.float32),
        ((16, 64), torch.float32),
    ],
    "outputs": [
        ((8, 16, 64), torch.float32),
    ]
}

```

```c++
#include <cuda_runtime.h>
#include <cuda_bf16.h>
#include <device_launch_parameters.h>
#include <complex>
#include <math.h>
#include <stdarg.h>  // Add this for va_list, va_start, va_end


// Helper function to convert float to __nv_bfloat16
__device__ __forceinline__ __nv_bfloat16 float_to_bfloat16(float f) {
    return __float2bfloat16(f);
}

// Helper function to convert __nv_bfloat16 to float
__device__ __forceinline__ float bfloat16_to_float(__nv_bfloat16 bf) {
    return __bfloat162float(bf);
}

// Custom CUDA kernel for fused GELU activation
__global__ void fused_gelu_kernel(const float* x, float* gelu_output, int batch_size, int sequence_length) {
    int idx = blockIdx.x * blockDim.x + threadIdx.x;
    if (idx < batch_size * sequence_length) {
        float val = x[idx];
        gelu_output[idx] = val * expf(0.5f * val * val) / (1.0f + expf(-1.702f * val));
    }
}

// CUDA kernel for complex-valued FFT (rfft)
__global__ void rfft_kernel(const float* gelu_output, float* rfft_output, int batch_size, int sequence_length) {
    int idx = blockIdx.x * blockDim.x + threadIdx.x;
    if (idx < batch_size * sequence_length) {
        rfft_output[idx] = gelu_output[idx];
    }
}

// CUDA kernel for matrix multiplication using bfloat16
__global__ void matmul_kernel_bf16(const float* rfft_output, const float* weight, float* output, 
                                        int batch_size, int sequence_length, int hidden_size) {
    int row = blockIdx.y * blockDim.y + threadIdx.y;
    int col = blockIdx.x * blockDim.x + threadIdx.x;
    
    if (row < batch_size * sequence_length && col < hidden_size) {
        float sum = 0.0f;
        for (int i = 0; i < sequence_length; ++i) {
            __nv_bfloat16 a = float_to_bfloat16(rfft_output[row * sequence_length + i]);
            __nv_bfloat16 b = float_to_bfloat16(weight[col * sequence_length + i]);  // Transposed access
            sum += bfloat16_to_float(__hmul(a, b));
        }
        output[row * hidden_size + col] = sum;
    }
}

extern "C" {

void fused_gelu_rfft_bf16(int num_args, ...) {
    va_list args;
    va_start(args, num_args);

    // Extract input tensor
    const float* x = va_arg(args, const float*);
    int x_dim0 = va_arg(args, int);
    int x_dim1 = va_arg(args, int);
    int x_dim2 = va_arg(args, int);

    // Extract weight tensor
    const float* weight = va_arg(args, const float*);
    int weight_dim0 = va_arg(args, int);
    int weight_dim1 = va_arg(args, int);

    // Extract output tensor (assuming it's preallocated)
    float* output = va_arg(args, float*);

    va_end(args);

    int batch_size = x_dim0;
    int sequence_length = x_dim1;
    int hidden_size = weight_dim0;

    // Allocate device memory
    float *d_x, *d_weight, *d_gelu_output, *d_rfft_output, *d_output;
    cudaMalloc(&d_x, batch_size * sequence_length * x_dim2 * sizeof(float));
    cudaMalloc(&d_weight, hidden_size * sequence_length * sizeof(float));
    cudaMalloc(&d_gelu_output, batch_size * sequence_length * x_dim2 * sizeof(float));
    cudaMalloc(&d_rfft_output, batch_size * sequence_length * sizeof(float));
    cudaMalloc(&d_output, batch_size * sequence_length * hidden_size * sizeof(float));

    // Copy input data to device
    cudaMemcpy(d_x, x, batch_size * sequence_length * x_dim2 * sizeof(float), cudaMemcpyHostToDevice);
    cudaMemcpy(d_weight, weight, hidden_size * sequence_length * sizeof(float), cudaMemcpyHostToDevice);

    // Launch GELU kernel
    dim3 threadsPerBlock(256);
    dim3 numBlocks((batch_size * sequence_length + threadsPerBlock.x - 1) / threadsPerBlock.x);
    fused_gelu_kernel<<<numBlocks, threadsPerBlock>>>(d_x, d_gelu_output, batch_size, sequence_length);

    // Launch rfft kernel
    rfft_kernel<<<numBlocks, threadsPerBlock>>>(d_gelu_output, d_rfft_output, batch_size, sequence_length);

    // Launch matmul kernel
    dim3 matmul_threadsPerBlock(32, 16);
    dim3 matmul_numBlocks((hidden_size + matmul_threadsPerBlock.x - 1) / matmul_threadsPerBlock.x,
                   (batch_size * sequence_length + matmul_threadsPerBlock.y - 1) / matmul_threadsPerBlock.y);

    matmul_kernel_bf16<<<matmul_numBlocks, matmul_threadsPerBlock>>>(
        d_rfft_output, d_weight, d_output, batch_size, sequence_length, hidden_size
    );

    // Copy result back to host
    cudaMemcpy(output, d_output, batch_size * sequence_length * hidden_size * sizeof(float), cudaMemcpyDeviceToHost);

    // Free device memory
    cudaFree(d_x);
    cudaFree(d_weight);
    cudaFree(d_gelu_output);
    cudaFree(d_rfft_output);
    cudaFree(d_output);
}

}  // extern "C"
```

```c++
#include <cuda_runtime.h>
#include <cuda_bf16.h>
#include <device_launch_parameters.h>
#include <complex>
#include <math.h>
#include <stdarg.h>  // Add this for va_list, va_start, va_end


// Helper function to convert float to __nv_bfloat16
__device__ __forceinline__ __nv_bfloat16 float_to_bfloat16(float f) {
    return __float2bfloat16(f);
}

// Helper function to convert __nv_bfloat16 to float
__device__ __forceinline__ float bfloat16_to_float(__nv_bfloat16 bf) {
    return __bfloat162float(bf);
}

// Custom CUDA kernel for fused GELU activation
__global__ void fused_gelu_kernel(const float* x, float* gelu_output, int batch_size, int sequence_length) {
    int idx = blockIdx.x * blockDim.x + threadIdx.x;
    if (idx < batch_size * sequence_length) {
        float val = x[idx];
        gelu_output[idx] = val * expf(0.5f * val * val) / (1.0f + expf(-1.702f * val));
    }
}

// CUDA kernel for complex-valued FFT (rfft)
__global__ void rfft_kernel(const float* gelu_output, float* rfft_output, int batch_size, int sequence_length) {
    int idx = blockIdx.x * blockDim.x + threadIdx.x;
    if (idx < batch_size * sequence_length) {
        rfft_output[idx] = gelu_output[idx];
    }
}

// CUDA kernel for matrix multiplication using bfloat16
__global__ void matmul_kernel_bf16(const float* rfft_output, const float* weight, float* output, 
                                        int batch_size, int sequence_length, int hidden_size) {
    int row = blockIdx.y * blockDim.y + threadIdx.y;
    int col = blockIdx.x * blockDim.x + threadIdx.x;
    
    if (row < batch_size * sequence_length && col < hidden_size) {
        float sum = 0.0f;
        for (int i = 0; i < sequence_length; ++i) {
            __nv_bfloat16 a = float_to_bfloat16(rfft_output[row * sequence_length + i]);
            __nv_bfloat16 b = float_to_bfloat16(weight[col * sequence_length + i]);  // Transposed access
            sum += bfloat16_to_float(__hmul(a, b));
        }
        output[row * hidden_size + col] = sum;
    }
}

extern "C" {

void fused_gelu_rfft_bf16(int num_args, ...) {
    va_list args;
    va_start(args, num_args);

    // Extract input tensor
    const float* x = va_arg(args, const float*);
    int x_dim0 = va_arg(args, int);
    int x_dim1 = va_arg(args, int);
    int x_dim2 = va_arg(args, int);

    // Extract weight tensor
    const float* weight = va_arg(args, const float*);
    int weight_dim0 = va_arg(args, int);
    int weight_dim1 = va_arg(args, int);

    // Extract output tensor (assuming it's preallocated)
    float* output = va_arg(args, float*);

    va_end(args);

    int batch_size = x_dim0;
    int sequence_length = x_dim1;
    int hidden_size = weight_dim0;

    // Allocate device memory
    float *d_x, *d_weight, *d_gelu_output, *d_rfft_output, *d_output;
    cudaMalloc(&d_x, batch_size * sequence_length * x_dim2 * sizeof(float));
    cudaMalloc(&d_weight, hidden_size * sequence_length * sizeof(float));
    cudaMalloc(&d_gelu_output, batch_size * sequence_length * x_dim2 * sizeof(float));
    cudaMalloc(&d_rfft_output, batch_size * sequence_length * sizeof(float));
    cudaMalloc(&d_output, batch_size * sequence_length * hidden_size * sizeof(float));

    // Copy input data to device
    cudaMemcpy(d_x, x, batch_size * sequence_length * x_dim2 * sizeof(float), cudaMemcpyHostToDevice);
    cudaMemcpy(d_weight, weight, hidden_size * sequence_length * sizeof(float), cudaMemcpyHostToDevice);

    // Launch GELU kernel
    dim3 threadsPerBlock(256);
    dim3 numBlocks((batch_size * sequence_length + threadsPerBlock.x - 1) / threadsPerBlock.x);
    fused_gelu_kernel<<<numBlocks, threadsPerBlock>>>(d_x, d_gelu_output, batch_size, sequence_length);

    // Launch rfft kernel
    rfft_kernel<<<numBlocks, threadsPerBlock>>>(d_gelu_output, d_rfft_output, batch_size, sequence_length);

    // Launch matmul kernel
    dim3 matmul_threadsPerBlock(32, 16);
    dim3 matmul_numBlocks((hidden_size + matmul_threadsPerBlock.x - 1) / matmul_threadsPerBlock.x,
                   (batch_size * sequence_length + matmul_threadsPerBlock.y - 1) / matmul_threadsPerBlock.y);

    matmul_kernel_bf16<<<matmul_numBlocks, matmul_threadsPerBlock>>>(
        d_rfft_output, d_weight, d_output, batch_size, sequence_length, hidden_size
    );

    // Copy result back to host
    cudaMemcpy(output, d_output, batch_size * sequence_length * hidden_size * sizeof(float), cudaMemcpyDeviceToHost);

    // Free device memory
    cudaFree(d_x);
    cudaFree(d_weight);
    cudaFree(d_gelu_output);
    cudaFree(d_rfft_output);
    cudaFree(d_output);
}

}  // extern "C"
```
