## func.py

```python
import torch

def inner_product_function(input_tensor: torch.Tensor, weight: torch.Tensor) -> torch.Tensor:
    """
    Calculates the inner product of two tensors.
    """
    return torch.sum(input_tensor * weight)

function_signature = {
    "name": "inner_product_function",
    "inputs": [
        ((4,), torch.float32),
        ((4,), torch.float32)
    ],
    "outputs": [
        ((1,), torch.float32),
    ]
}
```

## func.cu

```c++
#include <cuda_runtime.h>
#include <device_launch_parameters.h>
#include <stdarg.h>  // Add this for va_list, va_start, va_end

// CUDA kernel for inner product calculation
__global__ void inner_product_kernel(const float* input_tensor, const float* weight, float* output, int size) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;

    if (i < size) {
        atomicAdd(output, input_tensor[i] * weight[i]);
    }
}

extern "C" {

void inner_product_function(int num_args, ...) {
    va_list args;
    va_start(args, num_args);

    // Extract input tensor
    const float* input_tensor = va_arg(args, const float*);
    int input_tensor_size = va_arg(args, int);

    // Extract weight tensor
    const float* weight = va_arg(args, const float*);
    int weight_size = va_arg(args, int);

    // Extract output tensor (assuming it's preallocated)
    float* output = va_arg(args, float*);

    va_end(args);

    // Sanity check for input sizes
    if (input_tensor_size != weight_size) {
        // Handle error (e.g., throw exception or return error code)
        return;
    }

    // Allocate device memory
    float *d_input, *d_weight, *d_output;
    cudaMalloc(&d_input, input_tensor_size * sizeof(float));
    cudaMalloc(&d_weight, weight_size * sizeof(float));
    cudaMalloc(&d_output, sizeof(float));  // Output is a single float

    // Copy input data to device
    cudaMemcpy(d_input, input_tensor, input_tensor_size * sizeof(float), cudaMemcpyHostToDevice);
    cudaMemcpy(d_weight, weight, weight_size * sizeof(float), cudaMemcpyHostToDevice);
    cudaMemset(d_output, 0, sizeof(float)); // Initialize output to 0

    // Launch kernel
    int num_threads = min(input_tensor_size, 1024);
    int num_blocks = (input_tensor_size + num_threads - 1) / num_threads;

    inner_product_kernel<<<num_blocks, num_threads>>>(d_input, d_weight, d_output, input_tensor_size);

    // Copy result back to host
    cudaMemcpy(output, d_output, sizeof(float), cudaMemcpyDeviceToHost);

    // Free device memory
    cudaFree(d_input);
    cudaFree(d_weight);
    cudaFree(d_output);
}

}  // extern "C"
```