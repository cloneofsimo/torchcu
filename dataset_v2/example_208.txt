```python
import torch

def example_function(input_tensor: torch.Tensor, weight: torch.Tensor) -> torch.Tensor:
    """
    Performs a series of operations on input tensors, including:
    - Einsum with transpose
    - Binary cross-entropy with logits
    - Median calculation
    - Conversion to bfloat16 and int8
    """
    input_bf16 = input_tensor.to(torch.bfloat16)
    weight_bf16 = weight.to(torch.bfloat16)

    # Einsum with transpose
    output = torch.einsum('ijk,kl->ijl', input_bf16, weight_bf16.T)

    # Binary cross-entropy with logits
    output = torch.sigmoid(output)
    loss = torch.nn.functional.binary_cross_entropy_with_logits(output, input_tensor)

    # Median calculation
    median = torch.median(output)

    # Conversion to bfloat16 and int8
    output_bf16 = output.to(torch.bfloat16)
    output_int8 = output.to(torch.int8)

    return output_bf16

function_signature = {
    "name": "example_function",
    "inputs": [
        ((4, 4, 4), torch.float32),
        ((4, 4), torch.float32)
    ],
    "outputs": [
        ((4, 4, 4), torch.bfloat16),
    ]
}
```

```c++
#include <cuda_runtime.h>
#include <cuda_bf16.h>
#include <cuda_fp16.h>
#include <device_launch_parameters.h>
#include <stdarg.h>  // Add this for va_list, va_start, va_end

// Helper function to convert float to __nv_bfloat16
__device__ __forceinline__ __nv_bfloat16 float_to_bfloat16(float f) {
    return __float2bfloat16(f);
}

// Helper function to convert __nv_bfloat16 to float
__device__ __forceinline__ float bfloat16_to_float(__nv_bfloat16 bf) {
    return __bfloat162float(bf);
}

// CUDA kernel for einsum with transpose, sigmoid, and bce_with_logits
__global__ void einsum_sigmoid_bce_kernel_bf16(const float* input, const float* weight, float* output,
                                               int batch_size, int input_dim1, int input_dim2, int weight_dim1) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    int j = blockIdx.y * blockDim.y + threadIdx.y;
    int k = blockIdx.z * blockDim.z + threadIdx.z;

    if (i < batch_size && j < input_dim1 && k < input_dim2) {
        float sum = 0.0f;
        for (int l = 0; l < weight_dim1; ++l) {
            __nv_bfloat16 a = float_to_bfloat16(input[i * input_dim2 * input_dim1 + j * input_dim2 + l]);
            __nv_bfloat16 b = float_to_bfloat16(weight[k * weight_dim1 + l]); // Transposed access
            sum += bfloat16_to_float(__hmul(a, b));
        }
        output[i * input_dim2 * input_dim1 + j * input_dim2 + k] = 1.0f / (1.0f + expf(-sum));  // Sigmoid
        output[i * input_dim2 * input_dim1 + j * input_dim2 + k] = - (input[i * input_dim2 * input_dim1 + j * input_dim2 + k] * logf(output[i * input_dim2 * input_dim1 + j * input_dim2 + k]) + (1.0f - input[i * input_dim2 * input_dim1 + j * input_dim2 + k]) * logf(1.0f - output[i * input_dim2 * input_dim1 + j * input_dim2 + k]));  // BCE_with_logits
    }
}

// CUDA kernel for median calculation
__global__ void median_kernel_bf16(const __nv_bfloat16* input, __nv_bfloat16* output, int size) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;

    if (i < size) {
        output[0] = input[i];
    }
}

extern "C" {

void example_function(int num_args, ...) {
    va_list args;
    va_start(args, num_args);

    // Extract input tensor
    const float* input_tensor = va_arg(args, const float*);
    int input_tensor_dim0 = va_arg(args, int);
    int input_tensor_dim1 = va_arg(args, int);
    int input_tensor_dim2 = va_arg(args, int);

    // Extract weight tensor
    const float* weight = va_arg(args, const float*);
    int weight_dim0 = va_arg(args, int);
    int weight_dim1 = va_arg(args, int);

    // Extract output tensor (assuming it's preallocated)
    float* output = va_arg(args, float*);

    va_end(args);

    int batch_size = input_tensor_dim0;
    int input_dim1 = input_tensor_dim1;
    int input_dim2 = input_tensor_dim2;
    int weight_dim1 = weight_dim1;

    // Allocate device memory
    float *d_input, *d_weight, *d_output;
    cudaMalloc(&d_input, batch_size * input_dim1 * input_dim2 * sizeof(float));
    cudaMalloc(&d_weight, weight_dim0 * weight_dim1 * sizeof(float));
    cudaMalloc(&d_output, batch_size * input_dim1 * input_dim2 * sizeof(float));

    // Copy input data to device
    cudaMemcpy(d_input, input_tensor, batch_size * input_dim1 * input_dim2 * sizeof(float), cudaMemcpyHostToDevice);
    cudaMemcpy(d_weight, weight, weight_dim0 * weight_dim1 * sizeof(float), cudaMemcpyHostToDevice);

    // Launch einsum, sigmoid, and bce_with_logits kernel
    dim3 threadsPerBlock(16, 16, 16);
    dim3 numBlocks((batch_size + threadsPerBlock.x - 1) / threadsPerBlock.x, 
                   (input_dim1 + threadsPerBlock.y - 1) / threadsPerBlock.y, 
                   (input_dim2 + threadsPerBlock.z - 1) / threadsPerBlock.z);

    einsum_sigmoid_bce_kernel_bf16<<<numBlocks, threadsPerBlock>>>(
        d_input, d_weight, d_output, batch_size, input_dim1, input_dim2, weight_dim1
    );

    // Copy result back to host
    cudaMemcpy(output, d_output, batch_size * input_dim1 * input_dim2 * sizeof(float), cudaMemcpyDeviceToHost);
}

}  // extern "C"
```

```c++
#include <cuda_runtime.h>
#include <cuda_bf16.h>
#include <cuda_fp16.h>
#include <device_launch_parameters.h>
#include <stdarg.h>  // Add this for va_list, va_start, va_end

// Helper function to convert float to __nv_bfloat16
__device__ __forceinline__ __nv_bfloat16 float_to_bfloat16(float f) {
    return __float2bfloat16(f);
}

// Helper function to convert __nv_bfloat16 to float
__device__ __forceinline__ float bfloat16_to_float(__nv_bfloat16 bf) {
    return __bfloat162float(bf);
}

// CUDA kernel for einsum with transpose, sigmoid, and bce_with_logits
__global__ void einsum_sigmoid_bce_kernel_bf16(const float* input, const float* weight, float* output,
                                               int batch_size, int input_dim1, int input_dim2, int weight_dim1) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    int j = blockIdx.y * blockDim.y + threadIdx.y;
    int k = blockIdx.z * blockDim.z + threadIdx.z;

    if (i < batch_size && j < input_dim1 && k < input_dim2) {
        float sum = 0.0f;
        for (int l = 0; l < weight_dim1; ++l) {
            __nv_bfloat16 a = float_to_bfloat16(input[i * input_dim2 * input_dim1 + j * input_dim2 + l]);
            __nv_bfloat16 b = float_to_bfloat16(weight[k * weight_dim1 + l]); // Transposed access
            sum += bfloat16_to_float(__hmul(a, b));
        }
        output[i * input_dim2 * input_dim1 + j * input_dim2 + k] = 1.0f / (1.0f + expf(-sum));  // Sigmoid
        output[i * input_dim2 * input_dim1 + j * input_dim2 + k] = - (input[i * input_dim2 * input_dim1 + j * input_dim2 + k] * logf(output[i * input_dim2 * input_dim1 + j * input_dim2 + k]) + (1.0f - input[i * input_dim2 * input_dim1 + j * input_dim2 + k]) * logf(1.0f - output[i * input_dim2 * input_dim1 + j * input_dim2 + k]));  // BCE_with_logits
    }
}

// CUDA kernel for median calculation
__global__ void median_kernel_bf16(const __nv_bfloat16* input, __nv_bfloat16* output, int size) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;

    if (i < size) {
        output[0] = input[i];
    }
}

extern "C" {

void example_function(int num_args, ...) {
    va_list args;
    va_start(args, num_args);

    // Extract input tensor
    const float* input_tensor = va_arg(args, const float*);
    int input_tensor_dim0 = va_arg(args, int);
    int input_tensor_dim1 = va_arg(args, int);
    int input_tensor_dim2 = va_arg(args, int);

    // Extract weight tensor
    const float* weight = va_arg(args, const float*);
    int weight_dim0 = va_arg(args, int);
    int weight_dim1 = va_arg(args, int);

    // Extract output tensor (assuming it's preallocated)
    float* output = va_arg(args, float*);

    va_end(args);

    int batch_size = input_tensor_dim0;
    int input_dim1 = input_tensor_dim1;
    int input_dim2 = input_tensor_dim2;
    int weight_dim1 = weight_dim1;

    // Allocate device memory
    float *d_input, *d_weight, *d_output;
    cudaMalloc(&d_input, batch_size * input_dim1 * input_dim2 * sizeof(float));
    cudaMalloc(&d_weight, weight_dim0 * weight_dim1 * sizeof(float));
    cudaMalloc(&d_output, batch_size * input_dim1 * input_dim2 * sizeof(float));

    // Copy input data to device
    cudaMemcpy(d_input, input_tensor, batch_size * input_dim1 * input_dim2 * sizeof(float), cudaMemcpyHostToDevice);
    cudaMemcpy(d_weight, weight, weight_dim0 * weight_dim1 * sizeof(float), cudaMemcpyHostToDevice);

    // Launch einsum, sigmoid, and bce_with_logits kernel
    dim3 threadsPerBlock(16, 16, 16);
    dim3 numBlocks((batch_size + threadsPerBlock.x - 1) / threadsPerBlock.x, 
                   (input_dim1 + threadsPerBlock.y - 1) / threadsPerBlock.y, 
                   (input_dim2 + threadsPerBlock.z - 1) / threadsPerBlock.z);

    einsum_sigmoid_bce_kernel_bf16<<<numBlocks, threadsPerBlock>>>(
        d_input, d_weight, d_output, batch_size, input_dim1, input_dim2, weight_dim1
    );

    // Copy result back to host
    cudaMemcpy(output, d_output, batch_size * input_dim1 * input_dim2 * sizeof(float), cudaMemcpyDeviceToHost);
}

}  // extern "C"
```

```c++
#include <cuda_runtime.h>
#include <cuda_bf16.h>
#include <cuda_fp16.h>
#include <device_launch_parameters.h>
#include <stdarg.h>  // Add this for va_list, va_start, va_end

// Helper function to convert float to __nv_bfloat16
__device__ __forceinline__ __nv_bfloat16 float_to_bfloat16(float f) {
    return __float2bfloat16(f);
}

// Helper function to convert __nv_bfloat16 to float
__device__ __forceinline__ float bfloat16_to_float(__nv_bfloat16 bf) {
    return __bfloat162float(bf);
}

// CUDA kernel for einsum with transpose, sigmoid, and bce_with_logits
__global__ void einsum_sigmoid_bce_kernel_bf16(const float* input, const float* weight, float* output,
                                               int batch_size, int input_dim1, int input_dim2, int weight_dim1) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    int j = blockIdx.y * blockDim.y + threadIdx.y;
    int k = blockIdx.z * blockDim.z + threadIdx.z;

    if (i < batch_size && j < input_dim1 && k < input_dim2) {
        float sum = 0.0f;
        for (int l = 0; l < weight_dim1; ++l) {
            __nv_bfloat16 a = float_to_bfloat16(input[i * input_dim2 * input_dim1 + j * input_dim2 + l]);
            __nv_bfloat16 b = float_to_bfloat16(weight[k * weight_dim1 + l]); // Transposed access
            sum += bfloat16_to_float(__hmul(a, b));
        }
        output[i * input_dim2 * input_dim1 + j * input_dim2 + k] = 1.0f / (1.0f + expf(-sum));  // Sigmoid
        output[i * input_dim2 * input_dim1 + j * input_dim2 + k] = - (input[i * input_dim2 * input_dim1 + j * input_dim2 + k] * logf(output[i * input_dim2 * input_dim1 + j * input_dim2 + k]) + (1.0f - input[i * input_dim2 * input_dim1 + j * input_dim2 + k]) * logf(1.0f - output[i * input_dim2 * input_dim1 + j * input_dim2 + k]));  // BCE_with_logits
    }
}

// CUDA kernel for median calculation
__global__ void median_kernel_bf16(const __nv_bfloat16* input, __nv_bfloat16* output, int size) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;

    if (i < size) {
        output[0] = input[i];
    }
}

extern "C" {

void example_function(int num_args, ...) {
    va_list args;
    va_start(args, num_args);

    // Extract input tensor
    const float* input_tensor = va_arg(args, const float*);
    int input_tensor_dim0 = va_arg(args, int);
    int input_tensor_dim1 = va_arg(args, int);
    int input_tensor_dim2 = va_arg(args, int);

    // Extract weight tensor
    const float* weight = va_arg(args, const float*);
    int weight_dim0 = va_arg(args, int);
    int weight_dim1 = va_arg(args, int);

    // Extract output tensor (assuming it's preallocated)
    float* output = va_arg(args, float*);

    va_end(args);

    int batch_size = input_tensor_dim0;
    int input_dim1 = input_tensor_dim1;
    int input_dim2 = input_tensor_dim2;
    int weight_dim1 = weight_dim1;

    // Allocate device memory
    float *d_input, *d_weight, *d_output;
    cudaMalloc(&d_input, batch_size * input_dim1 * input_dim2 * sizeof(float));
    cudaMalloc(&d_weight, weight_dim0 * weight_dim1 * sizeof(float));
    cudaMalloc(&d_output, batch_size * input_dim1 * input_dim2 * sizeof(float));

    // Copy input data to device
    cudaMemcpy(d_input, input_tensor, batch_size * input_dim1 * input_dim2 * sizeof(float), cudaMemcpyHostToDevice);
    cudaMemcpy(d_weight, weight, weight_dim0 * weight_dim1 * sizeof(float), cudaMemcpyHostToDevice);

    // Launch einsum, sigmoid, and bce_with_logits kernel
    dim3 threadsPerBlock(16, 16, 16);
    dim3 numBlocks((batch_size + threadsPerBlock.x - 1) / threadsPerBlock.x, 
                   (input_dim1 + threadsPerBlock.y - 1) / threadsPerBlock.y, 
                   (input_dim2 + threadsPerBlock.z - 1) / threadsPerBlock.z);

    einsum_sigmoid_bce_kernel_bf16<<<numBlocks, threadsPerBlock>>>(
        d_input, d_weight, d_output, batch_size, input_dim1, input_dim2, weight_dim1
    );

    // Copy result back to host
    cudaMemcpy(output, d_output, batch_size * input_dim1 * input_dim2 * sizeof(float), cudaMemcpyDeviceToHost);
}

}  // extern "C"
```