```python
import torch

def subtract_tensor_function(input_tensor: torch.Tensor, value: float) -> torch.Tensor:
    """
    Subtracts a scalar value from each element of a tensor.
    """
    return input_tensor - value

function_signature = {
    "name": "subtract_tensor_function",
    "inputs": [
        ((2, 3), torch.float32),
        (torch.float32,)
    ],
    "outputs": [
        ((2, 3), torch.float32),
    ]
}
```

```c++
#include <cuda_runtime.h>
#include <device_launch_parameters.h>
#include <stdarg.h>  // Add this for va_list, va_start, va_end

// CUDA kernel for element-wise subtraction with a scalar
__global__ void subtract_scalar_kernel(const float* input, float value, float* output, int size) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < size) {
        output[i] = input[i] - value;
    }
}

extern "C" {

void subtract_tensor_function(int num_args, ...) {
    va_list args;
    va_start(args, num_args);

    // Extract input tensor
    const float* input = va_arg(args, const float*);
    int input_dim0 = va_arg(args, int);
    int input_dim1 = va_arg(args, int);

    // Extract scalar value
    float value = va_arg(args, double); 

    // Extract output tensor (assuming it's preallocated)
    float* output = va_arg(args, float*);

    va_end(args);

    int size = input_dim0 * input_dim1;

    // Allocate device memory
    float *d_input, *d_output;
    cudaMalloc(&d_input, size * sizeof(float));
    cudaMalloc(&d_output, size * sizeof(float));

    // Copy input data to device
    cudaMemcpy(d_input, input, size * sizeof(float), cudaMemcpyHostToDevice);

    // Launch kernel
    int threadsPerBlock = 256;
    int numBlocks = (size + threadsPerBlock - 1) / threadsPerBlock;

    subtract_scalar_kernel<<<numBlocks, threadsPerBlock>>>(
        d_input, value, d_output, size
    );

    // Copy result back to host
    cudaMemcpy(output, d_output, size * sizeof(float), cudaMemcpyDeviceToHost);

    // Free device memory
    cudaFree(d_input);
    cudaFree(d_output);
}

}  // extern "C"
```

**func.py:**

```python
import torch

def subtract_tensor_function(input_tensor: torch.Tensor, value: float) -> torch.Tensor:
    """
    Subtracts a scalar value from each element of a tensor.
    """
    return input_tensor - value

function_signature = {
    "name": "subtract_tensor_function",
    "inputs": [
        ((2, 3), torch.float32),
        (torch.float32,)
    ],
    "outputs": [
        ((2, 3), torch.float32),
    ]
}
```

**func.cu:**

```c++
#include <cuda_runtime.h>
#include <device_launch_parameters.h>
#include <stdarg.h>  // Add this for va_list, va_start, va_end

// CUDA kernel for element-wise subtraction with a scalar
__global__ void subtract_scalar_kernel(const float* input, float value, float* output, int size) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < size) {
        output[i] = input[i] - value;
    }
}

extern "C" {

void subtract_tensor_function(int num_args, ...) {
    va_list args;
    va_start(args, num_args);

    // Extract input tensor
    const float* input = va_arg(args, const float*);
    int input_dim0 = va_arg(args, int);
    int input_dim1 = va_arg(args, int);

    // Extract scalar value
    float value = va_arg(args, double); 

    // Extract output tensor (assuming it's preallocated)
    float* output = va_arg(args, float*);

    va_end(args);

    int size = input_dim0 * input_dim1;

    // Allocate device memory
    float *d_input, *d_output;
    cudaMalloc(&d_input, size * sizeof(float));
    cudaMalloc(&d_output, size * sizeof(float));

    // Copy input data to device
    cudaMemcpy(d_input, input, size * sizeof(float), cudaMemcpyHostToDevice);

    // Launch kernel
    int threadsPerBlock = 256;
    int numBlocks = (size + threadsPerBlock - 1) / threadsPerBlock;

    subtract_scalar_kernel<<<numBlocks, threadsPerBlock>>>(
        d_input, value, d_output, size
    );

    // Copy result back to host
    cudaMemcpy(output, d_output, size * sizeof(float), cudaMemcpyDeviceToHost);

    // Free device memory
    cudaFree(d_input);
    cudaFree(d_output);
}

}  // extern "C"
```