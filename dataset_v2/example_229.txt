## func.py

```python
import torch

class MyModule(torch.nn.Module):
    def __init__(self, input_size, hidden_size, output_size):
        super(MyModule, self).__init__()
        self.fc1 = torch.nn.Linear(input_size, hidden_size)
        self.fc2 = torch.nn.Linear(hidden_size, output_size)

    def forward(self, x: torch.Tensor) -> torch.Tensor:
        x = self.fc1(x)
        x = torch.nn.functional.gelu(x)
        x = torch.nn.functional.avg_pool1d(x.unsqueeze(1), kernel_size=3, stride=1, padding=1).squeeze(1)
        x = self.fc2(x)
        return x.to(torch.float32)

def my_function(input_tensor: torch.Tensor, weight: torch.Tensor) -> torch.Tensor:
    """
    Performs a simple linear transformation with bfloat16, then applies GELU and average pooling.
    """
    model = MyModule(input_tensor.shape[1], 16, 10)
    model.fc1.weight.data = weight.to(torch.bfloat16)
    output = model(input_tensor.to(torch.bfloat16))
    return output

function_signature = {
    "name": "my_function",
    "inputs": [
        ((10, 4), torch.float32),  # Input tensor
        ((16, 4), torch.float32)  # Weight tensor
    ],
    "outputs": [
        ((10, 10), torch.float32),  # Output tensor
    ]
}
```

## func.cu

```c++
#include <cuda_runtime.h>
#include <cuda_bf16.h>
#include <device_launch_parameters.h>
#include <math.h>  // for erf, exp

// Helper function to convert float to __nv_bfloat16
__device__ __forceinline__ __nv_bfloat16 float_to_bfloat16(float f) {
    return __float2bfloat16(f);
}

// Helper function to convert __nv_bfloat16 to float
__device__ __forceinline__ float bfloat16_to_float(__nv_bfloat16 bf) {
    return __bfloat162float(bf);
}

// GELU activation function using bfloat16
__device__ __forceinline__ float gelu_bf16(__nv_bfloat16 x) {
    float result = 0.5f * x * (1.0f + erf(x / sqrtf(2.0f)));
    return result;
}

// CUDA kernel for matrix multiplication and GELU using bfloat16
__global__ void matmul_gelu_kernel_bf16(const float* input_tensor, const float* weight, float* output, 
                                        int batch_size, int input_dim, int hidden_dim) {
    int row = blockIdx.y * blockDim.y + threadIdx.y;
    int col = blockIdx.x * blockDim.x + threadIdx.x;

    if (row < batch_size && col < hidden_dim) {
        float sum = 0.0f;
        for (int i = 0; i < input_dim; ++i) {
            __nv_bfloat16 a = float_to_bfloat16(input_tensor[row * input_dim + i]);
            __nv_bfloat16 b = float_to_bfloat16(weight[col * input_dim + i]);
            sum += bfloat16_to_float(__hmul(a, b));
        }
        output[row * hidden_dim + col] = gelu_bf16(float_to_bfloat16(sum));
    }
}

// CUDA kernel for average pooling with padding 1
__global__ void avg_pool1d_kernel(const float* input, float* output, int batch_size, int hidden_dim, int kernel_size) {
    int row = blockIdx.y * blockDim.y + threadIdx.y;
    int col = blockIdx.x * blockDim.x + threadIdx.x;

    if (row < batch_size && col < hidden_dim) {
        float sum = 0.0f;
        for (int i = col - 1; i <= col + 1; ++i) {
            if (i >= 0 && i < hidden_dim) {
                sum += input[row * hidden_dim + i];
            }
        }
        output[row * hidden_dim + col] = sum / kernel_size;
    }
}

// CUDA kernel for the second linear transformation
__global__ void matmul_kernel_bf16(const float* input_tensor, const float* weight, float* output,
                                    int batch_size, int input_dim, int output_dim) {
    int row = blockIdx.y * blockDim.y + threadIdx.y;
    int col = blockIdx.x * blockDim.x + threadIdx.x;

    if (row < batch_size && col < output_dim) {
        float sum = 0.0f;
        for (int i = 0; i < input_dim; ++i) {
            __nv_bfloat16 a = float_to_bfloat16(input_tensor[row * input_dim + i]);
            __nv_bfloat16 b = float_to_bfloat16(weight[col * input_dim + i]);
            sum += bfloat16_to_float(__hmul(a, b));
        }
        output[row * output_dim + col] = sum;
    }
}

extern "C" {

void my_function(int num_args, ...) {
    va_list args;
    va_start(args, num_args);

    // Extract input tensor
    const float* input_tensor = va_arg(args, const float*);
    int batch_size = va_arg(args, int);
    int input_dim = va_arg(args, int);

    // Extract weight tensor
    const float* weight = va_arg(args, const float*);
    int hidden_dim = va_arg(args, int);
    int output_dim = va_arg(args, int);

    // Extract output tensor (assuming it's preallocated)
    float* output = va_arg(args, float*);

    va_end(args);

    // Allocate device memory
    float *d_input, *d_weight, *d_hidden, *d_output;
    cudaMalloc(&d_input, batch_size * input_dim * sizeof(float));
    cudaMalloc(&d_weight, hidden_dim * input_dim * sizeof(float));
    cudaMalloc(&d_hidden, batch_size * hidden_dim * sizeof(float));
    cudaMalloc(&d_output, batch_size * output_dim * sizeof(float));

    // Copy input data to device
    cudaMemcpy(d_input, input_tensor, batch_size * input_dim * sizeof(float), cudaMemcpyHostToDevice);
    cudaMemcpy(d_weight, weight, hidden_dim * input_dim * sizeof(float), cudaMemcpyHostToDevice);

    // Launch kernel for first matrix multiplication and GELU
    dim3 threadsPerBlock(16, 16);
    dim3 numBlocks((hidden_dim + threadsPerBlock.x - 1) / threadsPerBlock.x,
                   (batch_size + threadsPerBlock.y - 1) / threadsPerBlock.y);

    matmul_gelu_kernel_bf16<<<numBlocks, threadsPerBlock>>>(
        d_input, d_weight, d_hidden, batch_size, input_dim, hidden_dim
    );

    // Launch kernel for average pooling
    numBlocks = ((hidden_dim + threadsPerBlock.x - 1) / threadsPerBlock.x,
                 (batch_size + threadsPerBlock.y - 1) / threadsPerBlock.y);

    avg_pool1d_kernel<<<numBlocks, threadsPerBlock>>>(
        d_hidden, d_hidden, batch_size, hidden_dim, 3
    );

    // Launch kernel for second matrix multiplication
    const float* second_weight = weight + hidden_dim * input_dim; // Offset to second weight
    numBlocks = ((output_dim + threadsPerBlock.x - 1) / threadsPerBlock.x,
                 (batch_size + threadsPerBlock.y - 1) / threadsPerBlock.y);

    matmul_kernel_bf16<<<numBlocks, threadsPerBlock>>>(
        d_hidden, second_weight, d_output, batch_size, hidden_dim, output_dim
    );

    // Copy result back to host
    cudaMemcpy(output, d_output, batch_size * output_dim * sizeof(float), cudaMemcpyDeviceToHost);

    // Free device memory
    cudaFree(d_input);
    cudaFree(d_weight);
    cudaFree(d_hidden);
    cudaFree(d_output);
}

}  // extern "C"
```