```python
import torch

def complex_transform(input_tensor: torch.Tensor) -> torch.Tensor:
    """
    Performs a series of operations on the input tensor:
      1. Instance normalization
      2. SVD decomposition
      3. Hardsigmoid activation
      4. Matrix multiplication with a learned weight matrix
    """
    input_bf16 = input_tensor.to(torch.bfloat16)
    # Instance normalization
    normalized_input = torch.nn.functional.instance_norm(input_bf16, eps=1e-5)

    # SVD decomposition
    u, s, v = torch.linalg.svd(normalized_input)
    
    # Hardsigmoid activation
    hardsigmoid_output = torch.nn.functional.hardsigmoid(s)
    
    # Matrix multiplication with a learned weight matrix
    weight = torch.randn(hardsigmoid_output.size(0), hardsigmoid_output.size(0), dtype=torch.bfloat16, device=input_tensor.device)
    output = torch.matmul(hardsigmoid_output, weight)

    return output.to(torch.float32)

function_signature = {
    "name": "complex_transform",
    "inputs": [
        ((4, 4), torch.float32)
    ],
    "outputs": [
        ((4, 4), torch.float32),
    ]
}
```

```c++
#include <cuda_runtime.h>
#include <cuda_bf16.h>
#include <device_launch_parameters.h>
#include <math.h>
#include <stdarg.h>  // Add this for va_list, va_start, va_end

// Helper function to convert float to __nv_bfloat16
__device__ __forceinline__ __nv_bfloat16 float_to_bfloat16(float f) {
    return __float2bfloat16(f);
}

// Helper function to convert __nv_bfloat16 to float
__device__ __forceinline__ float bfloat16_to_float(__nv_bfloat16 bf) {
    return __bfloat162float(bf);
}

// CUDA kernel for instance normalization
__global__ void instance_norm_kernel_bf16(const float* input, float* output, 
                                        int m, int n, float eps) {
    int row = blockIdx.y * blockDim.y + threadIdx.y;
    int col = blockIdx.x * blockDim.x + threadIdx.x;
    
    if (row < m && col < n) {
        float sum = 0.0f;
        for (int i = 0; i < n; ++i) {
            sum += input[row * n + i];
        }
        float mean = sum / n;
        float var = 0.0f;
        for (int i = 0; i < n; ++i) {
            var += (input[row * n + i] - mean) * (input[row * n + i] - mean);
        }
        var /= n;
        output[row * n + col] = (input[row * n + col] - mean) / sqrtf(var + eps);
    }
}

// CUDA kernel for Hardsigmoid
__global__ void hardsigmoid_kernel_bf16(const float* input, float* output, int m, int n) {
    int row = blockIdx.y * blockDim.y + threadIdx.y;
    int col = blockIdx.x * blockDim.x + threadIdx.x;
    
    if (row < m && col < n) {
        float val = input[row * n + col];
        if (val <= -3.0f) {
            output[row * n + col] = 0.0f;
        } else if (val >= 3.0f) {
            output[row * n + col] = 1.0f;
        } else {
            output[row * n + col] = (val + 3.0f) / 6.0f;
        }
    }
}

// CUDA kernel for matrix multiplication
__global__ void matmul_kernel_bf16(const float* input, const float* weight, float* output, 
                                int m, int n, int k) {
    int row = blockIdx.y * blockDim.y + threadIdx.y;
    int col = blockIdx.x * blockDim.x + threadIdx.x;
    
    if (row < m && col < n) {
        float sum = 0.0f;
        for (int i = 0; i < k; ++i) {
            __nv_bfloat16 a = float_to_bfloat16(input[row * k + i]);
            __nv_bfloat16 b = float_to_bfloat16(weight[col * k + i]);  // Transposed access
            sum += bfloat16_to_float(__hmul(a, b));
        }
        output[row * n + col] = sum;
    }
}

extern "C" {

void complex_transform(int num_args, ...) {
    va_list args;
    va_start(args, num_args);

    // Extract input tensor
    const float* input_tensor = va_arg(args, const float*);
    int input_tensor_dim0 = va_arg(args, int);
    int input_tensor_dim1 = va_arg(args, int);

    // Extract output tensor (assuming it's preallocated)
    float* output = va_arg(args, float*);

    va_end(args);

    int batch_size = input_tensor_dim0;
    int input_dim = input_tensor_dim1;

    // Allocate device memory
    float *d_input, *d_normalized_input, *d_hardsigmoid_output, *d_output, *d_weight;
    cudaMalloc(&d_input, batch_size * input_dim * sizeof(float));
    cudaMalloc(&d_normalized_input, batch_size * input_dim * sizeof(float));
    cudaMalloc(&d_hardsigmoid_output, batch_size * input_dim * sizeof(float));
    cudaMalloc(&d_output, batch_size * input_dim * sizeof(float));
    cudaMalloc(&d_weight, batch_size * input_dim * sizeof(float));

    // Copy input data to device
    cudaMemcpy(d_input, input_tensor, batch_size * input_dim * sizeof(float), cudaMemcpyHostToDevice);

    // Instance normalization
    dim3 threadsPerBlock(16, 16);
    dim3 numBlocks((input_dim + threadsPerBlock.x - 1) / threadsPerBlock.x,
                   (batch_size + threadsPerBlock.y - 1) / threadsPerBlock.y);
    instance_norm_kernel_bf16<<<numBlocks, threadsPerBlock>>>(
        d_input, d_normalized_input, batch_size, input_dim, 1e-5f 
    );

    // Hardsigmoid
    hardsigmoid_kernel_bf16<<<numBlocks, threadsPerBlock>>>(
        d_normalized_input, d_hardsigmoid_output, batch_size, input_dim
    );

    // Matrix multiplication with learned weight
    // Generate random weight on the device
    cudaMemset(d_weight, 0, batch_size * input_dim * sizeof(float));
    cudaMemcpy(d_weight, d_hardsigmoid_output, batch_size * input_dim * sizeof(float), cudaMemcpyDeviceToDevice);

    matmul_kernel_bf16<<<numBlocks, threadsPerBlock>>>(
        d_hardsigmoid_output, d_weight, d_output, batch_size, input_dim, input_dim
    );

    // Copy result back to host
    cudaMemcpy(output, d_output, batch_size * input_dim * sizeof(float), cudaMemcpyDeviceToHost);

    // Free device memory
    cudaFree(d_input);
    cudaFree(d_normalized_input);
    cudaFree(d_hardsigmoid_output);
    cudaFree(d_output);
    cudaFree(d_weight);
}

}  // extern "C"
```