## func.py

```python
import torch

def interpolate_mean_bf16(input_tensor: torch.Tensor, scale: float) -> torch.Tensor:
    """
    Interpolates the input tensor using linear interpolation and calculates the mean along the last dimension.
    All operations are performed in bfloat16 precision.
    """
    input_bf16 = input_tensor.to(torch.bfloat16)
    output_bf16 = torch.nn.functional.interpolate(input_bf16, scale_factor=scale, mode='linear', align_corners=False)
    output_mean = torch.mean(output_bf16, dim=-1)
    return output_mean.to(torch.float32)

function_signature = {
    "name": "interpolate_mean_bf16",
    "inputs": [
        ((16, 32, 64), torch.float32),
        (torch.float32)
    ],
    "outputs": [
        ((16, 32), torch.float32),
    ]
}
```

## func.cu

```c++
#include <cuda_runtime.h>
#include <cuda_bf16.h>
#include <device_launch_parameters.h>
#include <stdarg.h>  // Add this for va_list, va_start, va_end

// Helper function to convert float to __nv_bfloat16
__device__ __forceinline__ __nv_bfloat16 float_to_bfloat16(float f) {
    return __float2bfloat16(f);
}

// Helper function to convert __nv_bfloat16 to float
__device__ __forceinline__ float bfloat16_to_float(__nv_bfloat16 bf) {
    return __bfloat162float(bf);
}

// CUDA kernel for linear interpolation and mean calculation
__global__ void interpolate_mean_bf16_kernel(const float* input_tensor, float scale, float* output,
                                             int batch_size, int input_dim0, int input_dim1,
                                             int output_dim1) {
    int batch_idx = blockIdx.x * blockDim.x + threadIdx.x;
    int output_idx = blockIdx.y * blockDim.y + threadIdx.y;

    if (batch_idx < batch_size && output_idx < output_dim1) {
        float sum = 0.0f;
        int input_idx0 = output_idx * scale; // Interpolate input index
        int input_idx1 = input_idx0 + 1;

        // Handle boundary cases for interpolation
        if (input_idx1 >= input_dim1) {
            input_idx1 = input_dim1 - 1;
            input_idx0 = input_idx1 - 1;
        }

        for (int i = 0; i < input_dim1; ++i) {
            __nv_bfloat16 val = float_to_bfloat16(input_tensor[batch_idx * input_dim1 * input_dim0 + i]);
            if (i == input_idx0) {
                sum += bfloat16_to_float(val) * (1 - (output_idx * scale - input_idx0));
            } else if (i == input_idx1) {
                sum += bfloat16_to_float(val) * (output_idx * scale - input_idx0);
            }
        }

        output[batch_idx * output_dim1 + output_idx] = sum / input_dim1;
    }
}

extern "C" {

void interpolate_mean_bf16(int num_args, ...) {
    va_list args;
    va_start(args, num_args);

    // Extract input tensor
    const float* input_tensor = va_arg(args, const float*);
    int input_tensor_dim0 = va_arg(args, int);
    int input_tensor_dim1 = va_arg(args, int);
    int input_tensor_dim2 = va_arg(args, int);

    // Extract scale
    float scale = va_arg(args, float);

    // Extract output tensor (assuming it's preallocated)
    float* output = va_arg(args, float*);

    va_end(args);

    int batch_size = input_tensor_dim0;
    int input_dim1 = input_tensor_dim1;
    int output_dim1 = input_tensor_dim1 * scale;

    // Allocate device memory
    float *d_input, *d_output;
    cudaMalloc(&d_input, batch_size * input_dim1 * input_tensor_dim2 * sizeof(float));
    cudaMalloc(&d_output, batch_size * output_dim1 * sizeof(float));

    // Copy input data to device
    cudaMemcpy(d_input, input_tensor, batch_size * input_dim1 * input_tensor_dim2 * sizeof(float), cudaMemcpyHostToDevice);

    // Launch kernel
    dim3 threadsPerBlock(32, 16);
    dim3 numBlocks((batch_size + threadsPerBlock.x - 1) / threadsPerBlock.x,
                   (output_dim1 + threadsPerBlock.y - 1) / threadsPerBlock.y);

    interpolate_mean_bf16_kernel<<<numBlocks, threadsPerBlock>>>(
        d_input, scale, d_output, batch_size, input_tensor_dim1, input_tensor_dim2, output_dim1
    );

    // Copy result back to host
    cudaMemcpy(output, d_output, batch_size * output_dim1 * sizeof(float), cudaMemcpyDeviceToHost);

    // Free device memory
    cudaFree(d_input);
    cudaFree(d_output);
}

}  // extern "C"
```