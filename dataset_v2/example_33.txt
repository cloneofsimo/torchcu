```python
import torch
import torch.nn as nn
import torch.nn.functional as F
from torch.cuda.amp import autocast

class DETRTransformer(nn.Module):
    def __init__(self, d_model, nhead, num_encoder_layers, num_decoder_layers, dim_feedforward, dropout, activation="relu"):
        super().__init__()
        self.encoder = nn.TransformerEncoder(
            nn.TransformerEncoderLayer(d_model, nhead, dim_feedforward, dropout, activation),
            num_encoder_layers
        )
        self.decoder = nn.TransformerDecoder(
            nn.TransformerDecoderLayer(d_model, nhead, dim_feedforward, dropout, activation),
            num_decoder_layers
        )

    def forward(self, src, tgt, src_mask, tgt_mask, memory_mask):
        # Encode the source sequence
        encoder_output = self.encoder(src, src_mask)

        # Decode the target sequence using the encoder output
        decoder_output = self.decoder(tgt, encoder_output, tgt_mask, memory_mask)
        return decoder_output

def bucketize(tensor, num_buckets):
    """Bucketize a tensor into a specified number of buckets."""
    return torch.bucketize(tensor, torch.linspace(tensor.min(), tensor.max(), num_buckets))

def affine_grid_generator(theta, size):
    """Generates an affine grid for warping images."""
    return F.affine_grid(theta, size)

@torch.jit.script
def _forward_fn(input_tensor, weight, bias, output_tensor):
    # Perform linear transformation (matrix multiplication)
    input_bf16 = input_tensor.to(torch.bfloat16)
    weight_bf16 = weight.to(torch.bfloat16)
    output = torch.matmul(input_bf16, weight_bf16.t())

    # Apply bias (if provided)
    if bias is not None:
        output += bias

    # Quantize output to int8
    output_int8 = output.to(torch.int8)
    output_tensor.copy_(output_int8)

def int8_linear_bf16_function(input_tensor: torch.Tensor, weight: torch.Tensor, bias: torch.Tensor = None) -> torch.Tensor:
    """
    Performs a linear transformation (matrix multiplication) using bfloat16, applies optional bias, and quantizes the result to int8.
    """
    output_tensor = torch.empty(input_tensor.shape[0], weight.shape[0], dtype=torch.int8)
    _forward_fn(input_tensor, weight, bias, output_tensor)
    return output_tensor


function_signature = {
    "name": "int8_linear_bf16_function",
    "inputs": [
        ((4, 4), torch.float32),
        ((4, 4), torch.float32),
        ((4, ), torch.float32),
    ],
    "outputs": [
        ((4, 4), torch.int8),
    ]
}
```

```c++
#include <cuda_runtime.h>
#include <cuda_bf16.h>
#include <device_launch_parameters.h>
#include <stdarg.h>  // Add this for va_list, va_start, va_end

// Helper function to convert float to __nv_bfloat16
__device__ __forceinline__ __nv_bfloat16 float_to_bfloat16(float f) {
    return __float2bfloat16(f);
}

// Helper function to convert __nv_bfloat16 to float
__device__ __forceinline__ float bfloat16_to_float(__nv_bfloat16 bf) {
    return __bfloat162float(bf);
}

// CUDA kernel for matrix multiplication and ReLU using bfloat16
__global__ void matmul_bf16_int8_kernel(const float* input_tensor, const float* weight, const float* bias, int8_t* output,
                                        int m, int n, int k) {
    int row = blockIdx.y * blockDim.y + threadIdx.y;
    int col = blockIdx.x * blockDim.x + threadIdx.x;

    if (row < m && col < n) {
        float sum = 0.0f;
        for (int i = 0; i < k; ++i) {
            __nv_bfloat16 a = float_to_bfloat16(input_tensor[row * k + i]);
            __nv_bfloat16 b = float_to_bfloat16(weight[col * k + i]);  // Transposed access
            sum += bfloat16_to_float(__hmul(a, b));
        }
        if (bias != nullptr) {
            sum += bias[col];
        }
        output[row * n + col] = (int8_t)sum;
    }
}

extern "C" {

void int8_linear_bf16_function(int num_args, ...) {
    va_list args;
    va_start(args, num_args);

    // Extract input tensor
    const float* input_tensor = va_arg(args, const float*);
    int input_tensor_dim0 = va_arg(args, int);
    int input_tensor_dim1 = va_arg(args, int);

    // Extract weight tensor
    const float* weight = va_arg(args, const float*);
    int weight_dim0 = va_arg(args, int);
    int weight_dim1 = va_arg(args, int);

    // Extract bias tensor (optional)
    const float* bias = va_arg(args, const float*);

    // Extract output tensor (assuming it's preallocated)
    int8_t* output = va_arg(args, int8_t*);

    va_end(args);

    int batch_size = input_tensor_dim0;
    int input_dim = input_tensor_dim1;
    int output_dim = weight_dim0;

    // Allocate device memory
    float *d_input, *d_weight, *d_bias;
    int8_t *d_output;
    cudaMalloc(&d_input, batch_size * input_dim * sizeof(float));
    cudaMalloc(&d_weight, output_dim * input_dim * sizeof(float));
    if (bias != nullptr) {
        cudaMalloc(&d_bias, output_dim * sizeof(float));
    }
    cudaMalloc(&d_output, batch_size * output_dim * sizeof(int8_t));

    // Copy input data to device
    cudaMemcpy(d_input, input_tensor, batch_size * input_dim * sizeof(float), cudaMemcpyHostToDevice);
    cudaMemcpy(d_weight, weight, output_dim * input_dim * sizeof(float), cudaMemcpyHostToDevice);
    if (bias != nullptr) {
        cudaMemcpy(d_bias, bias, output_dim * sizeof(float), cudaMemcpyHostToDevice);
    }

    // Launch kernel
    dim3 threadsPerBlock(16, 16);
    dim3 numBlocks((output_dim + threadsPerBlock.x - 1) / threadsPerBlock.x,
                   (batch_size + threadsPerBlock.y - 1) / threadsPerBlock.y);

    matmul_bf16_int8_kernel<<<numBlocks, threadsPerBlock>>>(
        d_input, d_weight, d_bias, d_output, batch_size, output_dim, input_dim
    );

    // Copy result back to host
    cudaMemcpy(output, d_output, batch_size * output_dim * sizeof(int8_t), cudaMemcpyDeviceToHost);

    // Free device memory
    cudaFree(d_input);
    cudaFree(d_weight);
    if (bias != nullptr) {
        cudaFree(d_bias);
    }
    cudaFree(d_output);
}

}  // extern "C"
```