## func.py

```python
import torch

def complex_function(input_tensor: torch.Tensor, weight: torch.Tensor, bias: torch.Tensor) -> tuple[torch.Tensor, torch.Tensor]:
    """
    Performs a series of operations on the input tensor, including:
        - Matrix multiplication with weight
        - Addition of bias
        - SELU activation
        - All-reduce operation across all devices
        - Output tensor is converted to bfloat16
        - A second tensor is returned with its values multiplied by 2
    """
    output = torch.matmul(input_tensor, weight.t())
    output = output + bias
    output = torch.selu(output)
    output = torch.distributed.all_reduce(output)
    output_bf16 = output.to(torch.bfloat16)
    output2 = 2 * input_tensor
    return output_bf16, output2

function_signature = {
    "name": "complex_function",
    "inputs": [
        ((4, 4), torch.float32),
        ((4, 4), torch.float32),
        ((4,), torch.float32)
    ],
    "outputs": [
        ((4, 4), torch.bfloat16),
        ((4, 4), torch.float32),
    ]
}
```

## func.cu

```c++
#include <cuda_runtime.h>
#include <cuda_bf16.h>
#include <device_launch_parameters.h>
#include <stdarg.h> 
#include <math.h>

// Helper function to convert float to __nv_bfloat16
__device__ __forceinline__ __nv_bfloat16 float_to_bfloat16(float f) {
    return __float2bfloat16(f);
}

// Helper function to convert __nv_bfloat16 to float
__device__ __forceinline__ float bfloat16_to_float(__nv_bfloat16 bf) {
    return __bfloat162float(bf);
}

// SELU activation function
__device__ __forceinline__ float selu(float x) {
  const float alpha = 1.6732632423543772848170429916717;
  const float scale = 1.0507009873554804934193349852946;
  return (x > 0.0f) ? scale * x : scale * alpha * (expf(x) - 1.0f);
}

// CUDA kernel for matrix multiplication, bias addition, SELU, and all-reduce
__global__ void complex_function_kernel(const float* input_tensor, const float* weight, const float* bias, 
                                        __nv_bfloat16* output_bf16, float* output2, 
                                        int m, int n, int k, int num_devices) {
    int row = blockIdx.y * blockDim.y + threadIdx.y;
    int col = blockIdx.x * blockDim.x + threadIdx.x;

    if (row < m && col < n) {
        float sum = 0.0f;
        for (int i = 0; i < k; ++i) {
            sum += input_tensor[row * k + i] * weight[col * k + i];
        }
        sum += bias[col]; // Bias addition

        // SELU activation
        sum = selu(sum);

        // All-reduce - Use atomicAdd for simplicity (optimized version would use shared memory)
        // WARNING: Atomic operations can cause performance issues if heavily contended
        atomicAdd(&output_bf16[row * n + col], float_to_bfloat16(sum));

        // Multiply input_tensor by 2 for the second output tensor
        output2[row * n + col] = 2.0f * input_tensor[row * n + col]; 
    }
}

extern "C" {

void complex_function(int num_args, ...) {
    va_list args;
    va_start(args, num_args);

    // Extract input tensor
    const float* input_tensor = va_arg(args, const float*);
    int input_tensor_dim0 = va_arg(args, int);
    int input_tensor_dim1 = va_arg(args, int);

    // Extract weight tensor
    const float* weight = va_arg(args, const float*);
    int weight_dim0 = va_arg(args, int);
    int weight_dim1 = va_arg(args, int);

    // Extract bias tensor
    const float* bias = va_arg(args, const float*);
    int bias_dim = va_arg(args, int);

    // Extract output tensors
    __nv_bfloat16* output_bf16 = va_arg(args, __nv_bfloat16*);
    float* output2 = va_arg(args, float*);

    va_end(args);

    int batch_size = input_tensor_dim0;
    int input_dim = input_tensor_dim1;
    int output_dim = weight_dim0;

    // Get the number of devices (assumes distributed environment)
    int num_devices = 1;
    cudaGetDeviceCount(&num_devices);

    // Allocate device memory
    float *d_input, *d_weight, *d_bias;
    __nv_bfloat16 *d_output_bf16;
    float *d_output2;
    cudaMalloc(&d_input, batch_size * input_dim * sizeof(float));
    cudaMalloc(&d_weight, output_dim * input_dim * sizeof(float));
    cudaMalloc(&d_bias, bias_dim * sizeof(float));
    cudaMalloc(&d_output_bf16, batch_size * output_dim * sizeof(__nv_bfloat16));
    cudaMalloc(&d_output2, batch_size * output_dim * sizeof(float));

    // Copy input data to device
    cudaMemcpy(d_input, input_tensor, batch_size * input_dim * sizeof(float), cudaMemcpyHostToDevice);
    cudaMemcpy(d_weight, weight, output_dim * input_dim * sizeof(float), cudaMemcpyHostToDevice);
    cudaMemcpy(d_bias, bias, bias_dim * sizeof(float), cudaMemcpyHostToDevice);

    // Launch kernel
    dim3 threadsPerBlock(16, 16);
    dim3 numBlocks((output_dim + threadsPerBlock.x - 1) / threadsPerBlock.x,
                   (batch_size + threadsPerBlock.y - 1) / threadsPerBlock.y);

    complex_function_kernel<<<numBlocks, threadsPerBlock>>>(
        d_input, d_weight, d_bias, d_output_bf16, d_output2, batch_size, output_dim, input_dim, num_devices
    );

    // Copy result back to host
    cudaMemcpy(output_bf16, d_output_bf16, batch_size * output_dim * sizeof(__nv_bfloat16), cudaMemcpyDeviceToHost);
    cudaMemcpy(output2, d_output2, batch_size * output_dim * sizeof(float), cudaMemcpyDeviceToHost);

    // Free device memory
    cudaFree(d_input);
    cudaFree(d_weight);
    cudaFree(d_bias);
    cudaFree(d_output_bf16);
    cudaFree(d_output2);
}

} // extern "C"
```