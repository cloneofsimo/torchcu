## func.py

```python
import torch

def ridge_regression(input_tensor: torch.Tensor, weight: torch.Tensor, lambda_reg: float) -> torch.Tensor:
    """
    Performs ridge regression with a specified regularization strength.

    Args:
        input_tensor: Input tensor of shape (batch_size, input_features).
        weight: Weight tensor of shape (output_features, input_features).
        lambda_reg: Regularization strength.

    Returns:
        Output tensor of shape (batch_size, output_features).
    """
    output = torch.matmul(input_tensor, weight.t())
    regularization_loss = 0.5 * lambda_reg * torch.sum(weight ** 2)
    output = output - regularization_loss
    return output

function_signature = {
    "name": "ridge_regression",
    "inputs": [
        ((4, 4), torch.float32),
        ((4, 4), torch.float32),
        (torch.float32),
    ],
    "outputs": [
        ((4, 4), torch.float32),
    ]
}
```

## func.cu

```c++
#include <cuda_runtime.h>
#include <device_launch_parameters.h>
#include <stdarg.h>

__global__ void ridge_regression_kernel(const float* input_tensor, const float* weight, float* output,
                                        float lambda_reg, int m, int n, int k) {
    int row = blockIdx.y * blockDim.y + threadIdx.y;
    int col = blockIdx.x * blockDim.x + threadIdx.x;

    if (row < m && col < n) {
        float sum = 0.0f;
        for (int i = 0; i < k; ++i) {
            sum += input_tensor[row * k + i] * weight[col * k + i];
        }
        output[row * n + col] = sum;
    }
}

__global__ void regularization_kernel(const float* weight, float* regularization_loss, int output_features, int input_features, float lambda_reg) {
    int idx = blockIdx.x * blockDim.x + threadIdx.x;
    if (idx < output_features * input_features) {
        float weight_value = weight[idx];
        regularization_loss[0] += 0.5f * lambda_reg * weight_value * weight_value;
    }
}

extern "C" {
    void ridge_regression(int num_args, ...) {
        va_list args;
        va_start(args, num_args);

        const float* input_tensor = va_arg(args, const float*);
        int input_tensor_dim0 = va_arg(args, int);
        int input_tensor_dim1 = va_arg(args, int);

        const float* weight = va_arg(args, const float*);
        int weight_dim0 = va_arg(args, int);
        int weight_dim1 = va_arg(args, int);

        float lambda_reg = va_arg(args, double); // Cast to double for argument passing

        float* output = va_arg(args, float*);

        va_end(args);

        int batch_size = input_tensor_dim0;
        int input_dim = input_tensor_dim1;
        int output_dim = weight_dim0;

        float* d_input, *d_weight, *d_output, *d_regularization_loss;
        cudaMalloc(&d_input, batch_size * input_dim * sizeof(float));
        cudaMalloc(&d_weight, output_dim * input_dim * sizeof(float));
        cudaMalloc(&d_output, batch_size * output_dim * sizeof(float));
        cudaMalloc(&d_regularization_loss, sizeof(float));

        cudaMemcpy(d_input, input_tensor, batch_size * input_dim * sizeof(float), cudaMemcpyHostToDevice);
        cudaMemcpy(d_weight, weight, output_dim * input_dim * sizeof(float), cudaMemcpyHostToDevice);

        dim3 threadsPerBlock(16, 16);
        dim3 numBlocks((output_dim + threadsPerBlock.x - 1) / threadsPerBlock.x,
                       (batch_size + threadsPerBlock.y - 1) / threadsPerBlock.y);

        ridge_regression_kernel<<<numBlocks, threadsPerBlock>>>(
            d_input, d_weight, d_output, lambda_reg, batch_size, output_dim, input_dim
        );

        // Calculate regularization loss
        int regularization_threads = 1024;
        dim3 regularization_blocks((output_dim * input_dim + regularization_threads - 1) / regularization_threads);
        regularization_kernel<<<regularization_blocks, regularization_threads>>>(
            d_weight, d_regularization_loss, output_dim, input_dim, lambda_reg
        );

        // Read back regularization loss
        float host_regularization_loss;
        cudaMemcpy(&host_regularization_loss, d_regularization_loss, sizeof(float), cudaMemcpyDeviceToHost);

        cudaMemcpy(output, d_output, batch_size * output_dim * sizeof(float), cudaMemcpyDeviceToHost);

        // Subtract regularization loss from the output
        for (int i = 0; i < batch_size * output_dim; i++) {
            output[i] -= host_regularization_loss;
        }

        cudaFree(d_input);
        cudaFree(d_weight);
        cudaFree(d_output);
        cudaFree(d_regularization_loss);
    }
}
```