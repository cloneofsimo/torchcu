## func.py

```python
import torch

def my_complex_function(input_tensor: torch.Tensor, weight: torch.Tensor, bias: torch.Tensor) -> torch.Tensor:
    """
    Performs a series of operations including matrix multiplication, bias addition,
    activation, and element-wise summation, with optional bfloat16 conversion.
    """
    output = torch.matmul(input_tensor, weight.t()) + bias
    output = torch.relu(output)  # ReLU activation
    output.add_(torch.rand_like(output, dtype=torch.bfloat16))  # In-place addition with uniform random values
    output = torch.sum(output, dim=1, keepdim=True)  # Sum along the second dimension
    output = output.to(torch.bfloat16)  # Return output in bfloat16
    return output

function_signature = {
    "name": "my_complex_function",
    "inputs": [
        ((1, 4), torch.float32),  # Input tensor
        ((4, 4), torch.float32),  # Weight tensor
        ((1, 4), torch.float32),  # Bias tensor
    ],
    "outputs": [
        ((1, 1), torch.bfloat16),  # Output tensor
    ]
}
```

## func.cu

```c++
#include <cuda_runtime.h>
#include <cuda_bf16.h>
#include <device_launch_parameters.h>
#include <stdarg.h>  // Add this for va_list, va_start, va_end

// Helper function to convert float to __nv_bfloat16
__device__ __forceinline__ __nv_bfloat16 float_to_bfloat16(float f) {
    return __float2bfloat16(f);
}

// Helper function to convert __nv_bfloat16 to float
__device__ __forceinline__ float bfloat16_to_float(__nv_bfloat16 bf) {
    return __bfloat162float(bf);
}

// CUDA kernel for the complex function
__global__ void complex_kernel(const float* input_tensor, const float* weight, const float* bias, 
                               float* output, int m, int n, int k) {
    int row = blockIdx.y * blockDim.y + threadIdx.y;
    int col = blockIdx.x * blockDim.x + threadIdx.x;

    if (row < m && col < n) {
        float sum = 0.0f;
        for (int i = 0; i < k; ++i) {
            sum += input_tensor[row * k + i] * weight[col * k + i];
        }
        sum += bias[col];
        sum = fmaxf(sum, 0.0f); // ReLU activation
        sum += bfloat16_to_float(__int2bfloat16(curand_uniform() * 65536)); // In-place addition with uniform random values
        output[row * n + col] = sum;
    }
}

__global__ void sum_kernel(const float* input, float* output, int m, int n) {
    int row = blockIdx.y * blockDim.y + threadIdx.y;
    int col = blockIdx.x * blockDim.x + threadIdx.x;
    
    if (row < m && col < n) {
        float sum = 0.0f;
        for (int i = 0; i < k; ++i) {
            sum += input[row * n + i];
        }
        output[row * n + col] = sum;
    }
}

extern "C" {

void my_complex_function(int num_args, ...) {
    va_list args;
    va_start(args, num_args);

    // Extract input tensors
    const float* input_tensor = va_arg(args, const float*);
    int input_tensor_dim0 = va_arg(args, int);
    int input_tensor_dim1 = va_arg(args, int);

    const float* weight = va_arg(args, const float*);
    int weight_dim0 = va_arg(args, int);
    int weight_dim1 = va_arg(args, int);

    const float* bias = va_arg(args, const float*);
    int bias_dim0 = va_arg(args, int);
    int bias_dim1 = va_arg(args, int);

    // Extract output tensor
    float* output = va_arg(args, float*);

    va_end(args);

    int batch_size = input_tensor_dim0;
    int input_dim = input_tensor_dim1;
    int output_dim = weight_dim0;

    // Allocate device memory
    float *d_input, *d_weight, *d_bias, *d_output;
    cudaMalloc(&d_input, batch_size * input_dim * sizeof(float));
    cudaMalloc(&d_weight, output_dim * input_dim * sizeof(float));
    cudaMalloc(&d_bias, bias_dim0 * bias_dim1 * sizeof(float));
    cudaMalloc(&d_output, batch_size * output_dim * sizeof(float));

    // Copy input data to device
    cudaMemcpy(d_input, input_tensor, batch_size * input_dim * sizeof(float), cudaMemcpyHostToDevice);
    cudaMemcpy(d_weight, weight, output_dim * input_dim * sizeof(float), cudaMemcpyHostToDevice);
    cudaMemcpy(d_bias, bias, bias_dim0 * bias_dim1 * sizeof(float), cudaMemcpyHostToDevice);

    // Launch kernel for matrix multiplication, bias addition, activation, and in-place addition
    dim3 threadsPerBlock(16, 16);
    dim3 numBlocks((output_dim + threadsPerBlock.x - 1) / threadsPerBlock.x, 
                   (batch_size + threadsPerBlock.y - 1) / threadsPerBlock.y);
    complex_kernel<<<numBlocks, threadsPerBlock>>>(
        d_input, d_weight, d_bias, d_output, batch_size, output_dim, input_dim
    );

    // Launch kernel for sum along the second dimension
    dim3 sum_threadsPerBlock(16, 16);
    dim3 sum_numBlocks((output_dim + sum_threadsPerBlock.x - 1) / sum_threadsPerBlock.x,
                       (batch_size + sum_threadsPerBlock.y - 1) / sum_threadsPerBlock.y);

    sum_kernel<<<sum_numBlocks, sum_threadsPerBlock>>>(
        d_output, d_output, batch_size, output_dim
    );

    // Copy result back to host
    cudaMemcpy(output, d_output, batch_size * output_dim * sizeof(float), cudaMemcpyDeviceToHost);

    // Free device memory
    cudaFree(d_input);
    cudaFree(d_weight);
    cudaFree(d_bias);
    cudaFree(d_output);
}

}  // extern "C"
```