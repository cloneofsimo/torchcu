## func.py

```python
import torch
import torch.nn.functional as F

class MyModule(torch.nn.Module):
    def __init__(self, d_model, num_heads, dropout=0.1):
        super().__init__()
        self.d_model = d_model
        self.num_heads = num_heads
        self.head_dim = d_model // num_heads
        assert self.head_dim * num_heads == d_model, "d_model must be divisible by num_heads"

        self.depthwise_conv = torch.nn.Conv2d(
            in_channels=self.d_model,
            out_channels=self.d_model,
            kernel_size=3,
            groups=self.d_model,
            padding=1,
            bias=False
        )
        self.pe_proj = torch.nn.Linear(self.d_model, self.d_model, bias=False)
        self.qkv_proj = torch.nn.Linear(self.d_model, 3 * self.d_model, bias=False)
        self.out_proj = torch.nn.Linear(self.d_model, self.d_model, bias=False)
        self.dropout = torch.nn.Dropout(dropout)

    def forward(self, x):
        # Input shape: (batch_size, seq_len, d_model)
        # (batch_size, seq_len, d_model) -> (batch_size, d_model, seq_len)
        x = x.transpose(1, 2)
        # (batch_size, d_model, seq_len) -> (batch_size, d_model, seq_len, 1)
        x = x.unsqueeze(-1)

        # Depthwise convolution
        x = self.depthwise_conv(x)
        # (batch_size, d_model, seq_len, 1) -> (batch_size, seq_len, d_model)
        x = x.squeeze(-1).transpose(1, 2)

        # Learned Positional Encoding
        pe = self.pe_proj(x)
        x = x + pe

        # Linear Attention
        qkv = self.qkv_proj(x)
        # (batch_size, seq_len, 3*d_model) -> (batch_size, seq_len, 3, d_model)
        qkv = qkv.view(qkv.shape[0], qkv.shape[1], 3, self.d_model)
        # (batch_size, seq_len, 3, d_model) -> (batch_size, 3, seq_len, d_model)
        qkv = qkv.permute(0, 2, 1, 3)
        q, k, v = torch.split(qkv, 1, dim=1)
        # (batch_size, seq_len, d_model) -> (batch_size, num_heads, seq_len, head_dim)
        q = q.squeeze(1).view(q.shape[0], self.num_heads, q.shape[1], self.head_dim).to(torch.bfloat16)
        k = k.squeeze(1).view(k.shape[0], self.num_heads, k.shape[1], self.head_dim).to(torch.bfloat16)
        v = v.squeeze(1).view(v.shape[0], self.num_heads, v.shape[1], self.head_dim).to(torch.bfloat16)
        # (batch_size, num_heads, seq_len, head_dim) -> (batch_size, num_heads, head_dim, seq_len)
        k = k.transpose(2, 3)
        # (batch_size, num_heads, seq_len, head_dim) * (batch_size, num_heads, head_dim, seq_len) -> (batch_size, num_heads, seq_len, seq_len)
        attention = torch.matmul(q, k)
        # (batch_size, num_heads, seq_len, seq_len) -> (batch_size, num_heads, seq_len, seq_len)
        attention = attention / torch.sqrt(torch.tensor(self.head_dim, dtype=torch.bfloat16))
        # (batch_size, num_heads, seq_len, seq_len) -> (batch_size, num_heads, seq_len, seq_len)
        attention = F.softmax(attention, dim=-1)
        # (batch_size, num_heads, seq_len, seq_len) * (batch_size, num_heads, seq_len, head_dim) -> (batch_size, num_heads, seq_len, head_dim)
        attention = torch.matmul(attention, v)
        # (batch_size, num_heads, seq_len, head_dim) -> (batch_size, seq_len, num_heads, head_dim)
        attention = attention.permute(0, 2, 1, 3)
        # (batch_size, seq_len, num_heads, head_dim) -> (batch_size, seq_len, d_model)
        attention = attention.reshape(attention.shape[0], attention.shape[1], -1)
        attention = attention.to(torch.float32)

        # Output Projection
        output = self.out_proj(attention)
        output = self.dropout(output)

        # (batch_size, seq_len, d_model) -> (batch_size, d_model, seq_len)
        output = output.transpose(1, 2)
        # (batch_size, d_model, seq_len) -> (batch_size, seq_len, d_model)
        output = output.transpose(1, 2)
        return output

def my_function(input_tensor: torch.Tensor, weight: torch.Tensor) -> torch.Tensor:
    model = MyModule(d_model=512, num_heads=8)
    return model(input_tensor)

function_signature = {
    "name": "my_function",
    "inputs": [
        ((4, 16, 512), torch.float32),
        ((512, 512), torch.float32)
    ],
    "outputs": [
        ((4, 16, 512), torch.float32),
    ]
}
```

## func.cu

```c++
#include <cuda_runtime.h>
#include <cuda_bf16.h>
#include <device_launch_parameters.h>
#include <stdarg.h>  // Add this for va_list, va_start, va_end

// Helper function to convert float to __nv_bfloat16
__device__ __forceinline__ __nv_bfloat16 float_to_bfloat16(float f) {
    return __float2bfloat16(f);
}

// Helper function to convert __nv_bfloat16 to float
__device__ __forceinline__ float bfloat16_to_float(__nv_bfloat16 bf) {
    return __bfloat162float(bf);
}

// CUDA kernel for depthwise convolution
__global__ void depthwise_conv2d_kernel(const float* input, float* output, 
                                        int batch_size, int seq_len, int d_model) {
    int row = blockIdx.y * blockDim.y + threadIdx.y;
    int col = blockIdx.x * blockDim.x + threadIdx.x;
    
    if (row < seq_len && col < d_model) {
        for (int b = 0; b < batch_size; ++b) {
            float sum = 0.0f;
            for (int i = -1; i <= 1; ++i) {
                for (int j = -1; j <= 1; ++j) {
                    int in_row = row + i;
                    int in_col = col + j;
                    if (in_row >= 0 && in_row < seq_len && in_col >= 0 && in_col < d_model) {
                        sum += input[b * seq_len * d_model + in_row * d_model + in_col];
                    }
                }
            }
            output[b * seq_len * d_model + row * d_model + col] = sum;
        }
    }
}

// CUDA kernel for learned positional encoding
__global__ void learned_pe_kernel(const float* input, const float* pe_weights, float* output, 
                                        int batch_size, int seq_len, int d_model) {
    int row = blockIdx.y * blockDim.y + threadIdx.y;
    int col = blockIdx.x * blockDim.x + threadIdx.x;
    
    if (row < seq_len && col < d_model) {
        for (int b = 0; b < batch_size; ++b) {
            output[b * seq_len * d_model + row * d_model + col] = 
                input[b * seq_len * d_model + row * d_model + col] + 
                pe_weights[row * d_model + col];
        }
    }
}

// CUDA kernel for qkv projection
__global__ void qkv_proj_kernel(const float* input, float* qkv, 
                                        int batch_size, int seq_len, int d_model) {
    int row = blockIdx.y * blockDim.y + threadIdx.y;
    int col = blockIdx.x * blockDim.x + threadIdx.x;
    
    if (row < seq_len && col < 3 * d_model) {
        for (int b = 0; b < batch_size; ++b) {
            float sum = 0.0f;
            for (int i = 0; i < d_model; ++i) {
                sum += input[b * seq_len * d_model + row * d_model + i] * 
                       qkv[col * d_model + i];
            }
            qkv[b * seq_len * 3 * d_model + row * 3 * d_model + col] = sum;
        }
    }
}

// CUDA kernel for scaled dot-product attention
__global__ void scaled_dot_product_attention_kernel(const __nv_bfloat16* q, const __nv_bfloat16* k, 
                                                  const __nv_bfloat16* v, __nv_bfloat16* attention,
                                                  int batch_size, int num_heads, int seq_len, int head_dim) {
    int row = blockIdx.y * blockDim.y + threadIdx.y;
    int col = blockIdx.x * blockDim.x + threadIdx.x;
    
    if (row < seq_len && col < seq_len) {
        for (int b = 0; b < batch_size; ++b) {
            for (int h = 0; h < num_heads; ++h) {
                float sum = 0.0f;
                for (int i = 0; i < head_dim; ++i) {
                    __nv_bfloat16 a = q[b * num_heads * seq_len * head_dim + h * seq_len * head_dim + row * head_dim + i];
                    __nv_bfloat16 b = k[b * num_heads * seq_len * head_dim + h * seq_len * head_dim + col * head_dim + i];
                    sum += bfloat16_to_float(__hmul(a, b));
                }
                attention[b * num_heads * seq_len * seq_len + h * seq_len * seq_len + row * seq_len + col] = 
                    float_to_bfloat16(sum / sqrtf((float)head_dim));
            }
        }
    }
}

// CUDA kernel for attention output
__global__ void attention_output_kernel(const __nv_bfloat16* attention, const __nv_bfloat16* v, 
                                         __nv_bfloat16* output, 
                                         int batch_size, int num_heads, int seq_len, int head_dim) {
    int row = blockIdx.y * blockDim.y + threadIdx.y;
    int col = blockIdx.x * blockDim.x + threadIdx.x;
    
    if (row < seq_len && col < head_dim) {
        for (int b = 0; b < batch_size; ++b) {
            float sum = 0.0f;
            for (int i = 0; i < seq_len; ++i) {
                __nv_bfloat16 a = attention[b * num_heads * seq_len * seq_len + row * seq_len + i];
                __nv_bfloat16 b = v[b * num_heads * seq_len * head_dim + col * head_dim + i];
                sum += bfloat16_to_float(__hmul(a, b));
            }
            output[b * num_heads * seq_len * head_dim + row * head_dim + col] = float_to_bfloat16(sum);
        }
    }
}

// CUDA kernel for output projection
__global__ void output_proj_kernel(const __nv_bfloat16* attention, const float* out_proj_weights, 
                                     float* output,
                                     int batch_size, int seq_len, int d_model) {
    int row = blockIdx.y * blockDim.y + threadIdx.y;
    int col = blockIdx.x * blockDim.x + threadIdx.x;
    
    if (row < seq_len && col < d_model) {
        for (int b = 0; b < batch_size; ++b) {
            float sum = 0.0f;
            for (int i = 0; i < d_model; ++i) {
                sum += bfloat16_to_float(attention[b * seq_len * d_model + row * d_model + i]) * 
                       out_proj_weights[col * d_model + i];
            }
            output[b * seq_len * d_model + row * d_model + col] = sum;
        }
    }
}

extern "C" {

void my_function(int num_args, ...) {
    va_list args;
    va_start(args, num_args);

    // Extract input tensor
    const float* input_tensor = va_arg(args, const float*);
    int input_tensor_dim0 = va_arg(args, int);
    int input_tensor_dim1 = va_arg(args, int);
    int input_tensor_dim2 = va_arg(args, int);

    // Extract weight tensor
    const float* weight = va_arg(args, const float*);
    int weight_dim0 = va_arg(args, int);
    int weight_dim1 = va_arg(args, int);

    // Extract output tensor (assuming it's preallocated)
    float* output = va_arg(args, float*);

    va_end(args);

    int batch_size = input_tensor_dim0;
    int seq_len = input_tensor_dim1;
    int d_model = input_tensor_dim2;
    int num_heads = 8;
    int head_dim = d_model / num_heads;

    // Allocate device memory
    float *d_input, *d_output, *d_qkv, *d_pe_weights, *d_out_proj_weights;
    __nv_bfloat16 *d_q, *d_k, *d_v, *d_attention, *d_attention_output;
    cudaMalloc(&d_input, batch_size * seq_len * d_model * sizeof(float));
    cudaMalloc(&d_output, batch_size * seq_len * d_model * sizeof(float));
    cudaMalloc(&d_qkv, batch_size * seq_len * 3 * d_model * sizeof(float));
    cudaMalloc(&d_pe_weights, seq_len * d_model * sizeof(float));
    cudaMalloc(&d_out_proj_weights, d_model * d_model * sizeof(float));
    cudaMalloc(&d_q, batch_size * num_heads * seq_len * head_dim * sizeof(__nv_bfloat16));
    cudaMalloc(&d_k, batch_size * num_heads * seq_len * head_dim * sizeof(__nv_bfloat16));
    cudaMalloc(&d_v, batch_size * num_heads * seq_len * head_dim * sizeof(__nv_bfloat16));
    cudaMalloc(&d_attention, batch_size * num_heads * seq_len * seq_len * sizeof(__nv_bfloat16));
    cudaMalloc(&d_attention_output, batch_size * num_heads * seq_len * head_dim * sizeof(__nv_bfloat16));

    // Copy input data to device
    cudaMemcpy(d_input, input_tensor, batch_size * seq_len * d_model * sizeof(float), cudaMemcpyHostToDevice);
    cudaMemcpy(d_pe_weights, weight, seq_len * d_model * sizeof(float), cudaMemcpyHostToDevice);
    cudaMemcpy(d_out_proj_weights, weight + seq_len * d_model, d_model * d_model * sizeof(float), cudaMemcpyHostToDevice);

    // Depthwise convolution
    dim3 threadsPerBlock(16, 16);
    dim3 numBlocks((d_model + threadsPerBlock.x - 1) / threadsPerBlock.x,
                   (seq_len + threadsPerBlock.y - 1) / threadsPerBlock.y);
    depthwise_conv2d_kernel<<<numBlocks, threadsPerBlock>>>(d_input, d_output, batch_size, seq_len, d_model);

    // Learned Positional Encoding
    learned_pe_kernel<<<numBlocks, threadsPerBlock>>>(d_output, d_pe_weights, d_output, batch_size, seq_len, d_model);

    // QKV Projection
    numBlocks = ((3 * d_model + threadsPerBlock.x - 1) / threadsPerBlock.x,
                (seq_len + threadsPerBlock.y - 1) / threadsPerBlock.y);
    qkv_proj_kernel<<<numBlocks, threadsPerBlock>>>(d_output, d_qkv, batch_size, seq_len, d_model);

    // Split qkv
    cudaMemcpy(d_q, d_qkv, batch_size * seq_len * d_model * sizeof(__nv_bfloat16), cudaMemcpyDeviceToDevice);
    cudaMemcpy(d_k, d_qkv + batch_size * seq_len * d_model, batch_size * seq_len * d_model * sizeof(__nv_bfloat16), cudaMemcpyDeviceToDevice);
    cudaMemcpy(d_v, d_qkv + 2 * batch_size * seq_len * d_model, batch_size * seq_len * d_model * sizeof(__nv_bfloat16), cudaMemcpyDeviceToDevice);

    // Scaled Dot-Product Attention
    numBlocks = ((seq_len + threadsPerBlock.x - 1) / threadsPerBlock.x,
                (seq_len + threadsPerBlock.y - 1) / threadsPerBlock.y);
    scaled_dot_product_attention_kernel<<<numBlocks, threadsPerBlock>>>(d_q, d_k, d_v, d_attention,
                                                                     batch_size, num_heads, seq_len, head_dim);

    // Attention Output
    attention_output_kernel<<<numBlocks, threadsPerBlock>>>(d_attention, d_v, d_attention_output,
                                                            batch_size, num_heads, seq_len, head_dim);

    // Output Projection
    numBlocks = ((d_model + threadsPerBlock.x - 1) / threadsPerBlock.x,
                (seq_len + threadsPerBlock.y - 1) / threadsPerBlock.y);
    output_proj_kernel<<<numBlocks, threadsPerBlock>>>(d_attention_output, d_out_proj_weights, d_output,
                                                       batch_size, seq_len, d_model);

    // Copy result back to host
    cudaMemcpy(output, d_output, batch_size * seq_len * d_model * sizeof(float), cudaMemcpyDeviceToHost);

    // Free device memory
    cudaFree(d_input);
    cudaFree(d_output);
    cudaFree(d_qkv);
    cudaFree(d_pe_weights);
    cudaFree(d_out_proj_weights);
    cudaFree(d_q);
    cudaFree(d_k);
    cudaFree(d_v);
    cudaFree(d_attention);
    cudaFree(d_attention_output);
}

}  // extern "C"
```