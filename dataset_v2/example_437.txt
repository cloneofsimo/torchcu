```python
import torch

def my_function(input_tensor: torch.Tensor, values: torch.Tensor) -> torch.Tensor:
    """
    Checks if elements of input_tensor are present in values. 
    Returns a tensor with 1 if the element is in values, 0 otherwise.
    """
    return (input_tensor.unsqueeze(1) == values.unsqueeze(0)).any(dim=1).float()

function_signature = {
    "name": "my_function",
    "inputs": [
        ((4,), torch.float32),
        ((4,), torch.float32)
    ],
    "outputs": [
        ((4,), torch.float32)
    ]
}

```

```c++
#include <cuda_runtime.h>
#include <device_launch_parameters.h>
#include <stdarg.h> 

// CUDA kernel for checking if elements are present in a list
__global__ void isin_kernel(const float* input_tensor, const float* values, float* output, 
                                        int input_size, int values_size) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    
    if (i < input_size) {
        bool found = false;
        for (int j = 0; j < values_size; ++j) {
            if (input_tensor[i] == values[j]) {
                found = true;
                break;
            }
        }
        output[i] = found ? 1.0f : 0.0f;
    }
}

extern "C" {

void my_function(int num_args, ...) {
    va_list args;
    va_start(args, num_args);

    // Extract input tensor
    const float* input_tensor = va_arg(args, const float*);
    int input_tensor_dim0 = va_arg(args, int);

    // Extract values tensor
    const float* values = va_arg(args, const float*);
    int values_dim0 = va_arg(args, int);

    // Extract output tensor (assuming it's preallocated)
    float* output = va_arg(args, float*);

    va_end(args);

    int input_size = input_tensor_dim0;
    int values_size = values_dim0;

    // Allocate device memory
    float *d_input, *d_values, *d_output;
    cudaMalloc(&d_input, input_size * sizeof(float));
    cudaMalloc(&d_values, values_size * sizeof(float));
    cudaMalloc(&d_output, input_size * sizeof(float));

    // Copy input data to device
    cudaMemcpy(d_input, input_tensor, input_size * sizeof(float), cudaMemcpyHostToDevice);
    cudaMemcpy(d_values, values, values_size * sizeof(float), cudaMemcpyHostToDevice);

    // Launch kernel
    dim3 threadsPerBlock(256);
    dim3 numBlocks((input_size + threadsPerBlock.x - 1) / threadsPerBlock.x);

    isin_kernel<<<numBlocks, threadsPerBlock>>>(
        d_input, d_values, d_output, input_size, values_size
    );

    // Copy result back to host
    cudaMemcpy(output, d_output, input_size * sizeof(float), cudaMemcpyDeviceToHost);

    // Free device memory
    cudaFree(d_input);
    cudaFree(d_values);
    cudaFree(d_output);
}

}  // extern "C"
```