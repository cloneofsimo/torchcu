```python
import torch

def adaptive_avg_pool3d_example(input_tensor: torch.Tensor) -> torch.Tensor:
    """
    Applies a 3D adaptive average pooling over an input signal composed of several input planes.
    """
    return torch.nn.functional.adaptive_avg_pool3d(input_tensor, (1, 1, 1))

function_signature = {
    "name": "adaptive_avg_pool3d_example",
    "inputs": [
        ((16, 3, 10, 10, 10), torch.float32),
    ],
    "outputs": [
        ((16, 3, 1, 1, 1), torch.float32),
    ]
}
```

```c++
#include <cuda_runtime.h>
#include <device_launch_parameters.h>
#include <stdarg.h> 

__global__ void adaptive_avg_pool3d_kernel(const float* input, float* output, int batch_size, int channels, int in_depth, int in_height, int in_width) {
  int b = blockIdx.x * blockDim.x + threadIdx.x;
  int c = blockIdx.y * blockDim.y + threadIdx.y;
  int d = blockIdx.z * blockDim.z + threadIdx.z;

  if (b < batch_size && c < channels && d < 1) {
    float sum = 0.0f;
    for (int i = 0; i < in_depth; ++i) {
      for (int j = 0; j < in_height; ++j) {
        for (int k = 0; k < in_width; ++k) {
          sum += input[(b * channels + c) * in_depth * in_height * in_width + i * in_height * in_width + j * in_width + k];
        }
      }
    }
    output[(b * channels + c) * 1 * 1 * 1 + d] = sum / (in_depth * in_height * in_width);
  }
}

extern "C" {

void adaptive_avg_pool3d_example(int num_args, ...) {
  va_list args;
  va_start(args, num_args);

  const float* input = va_arg(args, const float*);
  int batch_size = va_arg(args, int);
  int channels = va_arg(args, int);
  int in_depth = va_arg(args, int);
  int in_height = va_arg(args, int);
  int in_width = va_arg(args, int);

  float* output = va_arg(args, float*);

  va_end(args);

  float* d_input;
  float* d_output;

  cudaMalloc(&d_input, batch_size * channels * in_depth * in_height * in_width * sizeof(float));
  cudaMalloc(&d_output, batch_size * channels * 1 * 1 * 1 * sizeof(float));

  cudaMemcpy(d_input, input, batch_size * channels * in_depth * in_height * in_width * sizeof(float), cudaMemcpyHostToDevice);

  dim3 threadsPerBlock(16, 16, 1);
  dim3 numBlocks((batch_size + threadsPerBlock.x - 1) / threadsPerBlock.x,
                  (channels + threadsPerBlock.y - 1) / threadsPerBlock.y,
                  (1 + threadsPerBlock.z - 1) / threadsPerBlock.z);

  adaptive_avg_pool3d_kernel<<<numBlocks, threadsPerBlock>>>(d_input, d_output, batch_size, channels, in_depth, in_height, in_width);

  cudaMemcpy(output, d_output, batch_size * channels * 1 * 1 * 1 * sizeof(float), cudaMemcpyDeviceToHost);

  cudaFree(d_input);
  cudaFree(d_output);
}

}
```