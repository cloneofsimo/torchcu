```python
import torch
import torch.nn as nn

class MyModule(nn.Module):
    def __init__(self, in_features, out_features):
        super().__init__()
        self.linear = nn.Linear(in_features, out_features)
        self.bn = nn.BatchNorm1d(out_features)

    def forward(self, x):
        x = self.linear(x)
        x = self.bn(x)
        x = torch.sigmoid(x)
        return x

def my_function(input_tensor: torch.Tensor) -> torch.Tensor:
    """
    Performs a linear transformation, batch normalization, sigmoid activation, and then inversion.
    """
    model = MyModule(in_features=input_tensor.shape[1], out_features=4)
    output = model(input_tensor)
    output = 1.0 / output
    return output

function_signature = {
    "name": "my_function",
    "inputs": [
        ((1, 4), torch.float32)
    ],
    "outputs": [
        ((1, 4), torch.float32),
    ]
}
```

```c++
#include <cuda_runtime.h>
#include <cuda_bf16.h>
#include <device_launch_parameters.h>
#include <stdarg.h> 
#include <math.h>

// Helper function to convert float to __nv_bfloat16
__device__ __forceinline__ __nv_bfloat16 float_to_bfloat16(float f) {
    return __float2bfloat16(f);
}

// Helper function to convert __nv_bfloat16 to float
__device__ __forceinline__ float bfloat16_to_float(__nv_bfloat16 bf) {
    return __bfloat162float(bf);
}

// CUDA kernel for matrix multiplication
__global__ void matmul_kernel(const float* input_tensor, const float* weight, float* output, 
                                        int m, int n, int k) {
    int row = blockIdx.y * blockDim.y + threadIdx.y;
    int col = blockIdx.x * blockDim.x + threadIdx.x;
    
    if (row < m && col < n) {
        float sum = 0.0f;
        for (int i = 0; i < k; ++i) {
            sum += input_tensor[row * k + i] * weight[col * k + i];  // Transposed access
        }
        output[row * n + col] = sum;
    }
}

// CUDA kernel for batch normalization
__global__ void batch_norm_kernel(const float* input, const float* gamma, const float* beta, 
                                        float* output, int N, int C, float eps) {
    int idx = blockIdx.x * blockDim.x + threadIdx.x;
    if (idx < N * C) {
        int n = idx / C;
        int c = idx % C;

        float sum = 0.0f;
        for (int i = 0; i < N; ++i) {
            sum += input[i * C + c];
        }
        float mean = sum / N;

        float var = 0.0f;
        for (int i = 0; i < N; ++i) {
            var += (input[i * C + c] - mean) * (input[i * C + c] - mean);
        }
        var /= N;

        output[idx] = (input[idx] - mean) / sqrtf(var + eps) * gamma[c] + beta[c];
    }
}

// CUDA kernel for sigmoid activation
__global__ void sigmoid_kernel(const float* input, float* output, int N, int C) {
    int idx = blockIdx.x * blockDim.x + threadIdx.x;
    if (idx < N * C) {
        output[idx] = 1.0f / (1.0f + expf(-input[idx]));
    }
}

// CUDA kernel for inversion
__global__ void inverse_kernel(const float* input, float* output, int N, int C) {
    int idx = blockIdx.x * blockDim.x + threadIdx.x;
    if (idx < N * C) {
        output[idx] = 1.0f / input[idx];
    }
}

extern "C" {

void my_function(int num_args, ...) {
    va_list args;
    va_start(args, num_args);

    // Extract input tensor
    const float* input_tensor = va_arg(args, const float*);
    int input_tensor_dim0 = va_arg(args, int);
    int input_tensor_dim1 = va_arg(args, int);

    // Extract output tensor (assuming it's preallocated)
    float* output = va_arg(args, float*);

    va_end(args);

    // Dimensions
    int batch_size = input_tensor_dim0;
    int input_dim = input_tensor_dim1;
    int output_dim = 4;

    // Allocate device memory
    float *d_input, *d_weight, *d_output, *d_gamma, *d_beta;
    cudaMalloc(&d_input, batch_size * input_dim * sizeof(float));
    cudaMalloc(&d_weight, output_dim * input_dim * sizeof(float));
    cudaMalloc(&d_output, batch_size * output_dim * sizeof(float));
    cudaMalloc(&d_gamma, output_dim * sizeof(float));
    cudaMalloc(&d_beta, output_dim * sizeof(float));

    // Copy input data to device
    cudaMemcpy(d_input, input_tensor, batch_size * input_dim * sizeof(float), cudaMemcpyHostToDevice);

    // Define weights, gamma, and beta
    float weight_data[] = {0.1f, 0.2f, 0.3f, 0.4f, 0.5f, 0.6f, 0.7f, 0.8f, 0.9f, 1.0f, 1.1f, 1.2f, 1.3f, 1.4f, 1.5f, 1.6f};
    float gamma_data[] = {1.0f, 1.0f, 1.0f, 1.0f};
    float beta_data[] = {0.0f, 0.0f, 0.0f, 0.0f};
    cudaMemcpy(d_weight, weight_data, output_dim * input_dim * sizeof(float), cudaMemcpyHostToDevice);
    cudaMemcpy(d_gamma, gamma_data, output_dim * sizeof(float), cudaMemcpyHostToDevice);
    cudaMemcpy(d_beta, beta_data, output_dim * sizeof(float), cudaMemcpyHostToDevice);

    // Launch kernels
    dim3 threadsPerBlock(16, 16);
    dim3 numBlocks((output_dim + threadsPerBlock.x - 1) / threadsPerBlock.x,
                   (batch_size + threadsPerBlock.y - 1) / threadsPerBlock.y);

    matmul_kernel<<<numBlocks, threadsPerBlock>>>(d_input, d_weight, d_output, batch_size, output_dim, input_dim);
    batch_norm_kernel<<<(batch_size * output_dim + 255) / 256, 256>>>(d_output, d_gamma, d_beta, d_output, batch_size, output_dim, 1e-5f);
    sigmoid_kernel<<<(batch_size * output_dim + 255) / 256, 256>>>(d_output, d_output, batch_size, output_dim);
    inverse_kernel<<<(batch_size * output_dim + 255) / 256, 256>>>(d_output, d_output, batch_size, output_dim);

    // Copy result back to host
    cudaMemcpy(output, d_output, batch_size * output_dim * sizeof(float), cudaMemcpyDeviceToHost);

    // Free device memory
    cudaFree(d_input);
    cudaFree(d_weight);
    cudaFree(d_output);
    cudaFree(d_gamma);
    cudaFree(d_beta);
}

}  // extern "C"

```

```c++
#include <cuda_runtime.h>
#include <cuda_bf16.h>
#include <device_launch_parameters.h>
#include <stdarg.h> 
#include <math.h>

// Helper function to convert float to __nv_bfloat16
__device__ __forceinline__ __nv_bfloat16 float_to_bfloat16(float f) {
    return __float2bfloat16(f);
}

// Helper function to convert __nv_bfloat16 to float
__device__ __forceinline__ float bfloat16_to_float(__nv_bfloat16 bf) {
    return __bfloat162float(bf);
}

// CUDA kernel for matrix multiplication
__global__ void matmul_kernel(const float* input_tensor, const float* weight, float* output, 
                                        int m, int n, int k) {
    int row = blockIdx.y * blockDim.y + threadIdx.y;
    int col = blockIdx.x * blockDim.x + threadIdx.x;
    
    if (row < m && col < n) {
        float sum = 0.0f;
        for (int i = 0; i < k; ++i) {
            sum += input_tensor[row * k + i] * weight[col * k + i];  // Transposed access
        }
        output[row * n + col] = sum;
    }
}

// CUDA kernel for batch normalization
__global__ void batch_norm_kernel(const float* input, const float* gamma, const float* beta, 
                                        float* output, int N, int C, float eps) {
    int idx = blockIdx.x * blockDim.x + threadIdx.x;
    if (idx < N * C) {
        int n = idx / C;
        int c = idx % C;

        float sum = 0.0f;
        for (int i = 0; i < N; ++i) {
            sum += input[i * C + c];
        }
        float mean = sum / N;

        float var = 0.0f;
        for (int i = 0; i < N; ++i) {
            var += (input[i * C + c] - mean) * (input[i * C + c] - mean);
        }
        var /= N;

        output[idx] = (input[idx] - mean) / sqrtf(var + eps) * gamma[c] + beta[c];
    }
}

// CUDA kernel for sigmoid activation
__global__ void sigmoid_kernel(const float* input, float* output, int N, int C) {
    int idx = blockIdx.x * blockDim.x + threadIdx.x;
    if (idx < N * C) {
        output[idx] = 1.0f / (1.0f + expf(-input[idx]));
    }
}

// CUDA kernel for inversion
__global__ void inverse_kernel(const float* input, float* output, int N, int C) {
    int idx = blockIdx.x * blockDim.x + threadIdx.x;
    if (idx < N * C) {
        output[idx] = 1.0f / input[idx];
    }
}

extern "C" {

void my_function(int num_args, ...) {
    va_list args;
    va_start(args, num_args);

    // Extract input tensor
    const float* input_tensor = va_arg(args, const float*);
    int input_tensor_dim0 = va_arg(args, int);
    int input_tensor_dim1 = va_arg(args, int);

    // Extract output tensor (assuming it's preallocated)
    float* output = va_arg(args, float*);

    va_end(args);

    // Dimensions
    int batch_size = input_tensor_dim0;
    int input_dim = input_tensor_dim1;
    int output_dim = 4;

    // Allocate device memory
    float *d_input, *d_weight, *d_output, *d_gamma, *d_beta;
    cudaMalloc(&d_input, batch_size * input_dim * sizeof(float));
    cudaMalloc(&d_weight, output_dim * input_dim * sizeof(float));
    cudaMalloc(&d_output, batch_size * output_dim * sizeof(float));
    cudaMalloc(&d_gamma, output_dim * sizeof(float));
    cudaMalloc(&d_beta, output_dim * sizeof(float));

    // Copy input data to device
    cudaMemcpy(d_input, input_tensor, batch_size * input_dim * sizeof(float), cudaMemcpyHostToDevice);

    // Define weights, gamma, and beta
    float weight_data[] = {0.1f, 0.2f, 0.3f, 0.4f, 0.5f, 0.6f, 0.7f, 0.8f, 0.9f, 1.0f, 1.1f, 1.2f, 1.3f, 1.4f, 1.5f, 1.6f};
    float gamma_data[] = {1.0f, 1.0f, 1.0f, 1.0f};
    float beta_data[] = {0.0f, 0.0f, 0.0f, 0.0f};
    cudaMemcpy(d_weight, weight_data, output_dim * input_dim * sizeof(float), cudaMemcpyHostToDevice);
    cudaMemcpy(d_gamma, gamma_data, output_dim * sizeof(float), cudaMemcpyHostToDevice);
    cudaMemcpy(d_beta, beta_data, output_dim * sizeof(float), cudaMemcpyHostToDevice);

    // Launch kernels
    dim3 threadsPerBlock(16, 16);
    dim3 numBlocks((output_dim + threadsPerBlock.x - 1) / threadsPerBlock.x,
                   (batch_size + threadsPerBlock.y - 1) / threadsPerBlock.y);

    matmul_kernel<<<numBlocks, threadsPerBlock>>>(d_input, d_weight, d_output, batch_size, output_dim, input_dim);
    batch_norm_kernel<<<(batch_size * output_dim + 255) / 256, 256>>>(d_output, d_gamma, d_beta, d_output, batch_size, output_dim, 1e-5f);
    sigmoid_kernel<<<(batch_size * output_dim + 255) / 256, 256>>>(d_output, d_output, batch_size, output_dim);
    inverse_kernel<<<(batch_size * output_dim + 255) / 256, 256>>>(d_output, d_output, batch_size, output_dim);

    // Copy result back to host
    cudaMemcpy(output, d_output, batch_size * output_dim * sizeof(float), cudaMemcpyDeviceToHost);

    // Free device memory
    cudaFree(d_input);
    cudaFree(d_weight);
    cudaFree(d_output);
    cudaFree(d_gamma);
    cudaFree(d_beta);
}

}  // extern "C"

```
