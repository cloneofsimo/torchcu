## func.py

```python
import torch
import torch.nn.functional as F

def complex_function(input_tensor: torch.Tensor, weight: torch.Tensor, bias: torch.Tensor, 
                     temperature: float = 1.0, top_k: int = 5, 
                     alpha: float = 0.5) -> torch.Tensor:
    """
    This function performs a series of operations on the input tensor, including:
    - Adaptive average pooling
    - Gumbel-Softmax sampling
    - Multinomial sampling
    - Ridge regularization
    - Matrix multiplication with bias
    - ReLU activation

    Args:
        input_tensor: The input tensor of shape (batch_size, seq_len, input_dim).
        weight: The weight matrix of shape (output_dim, input_dim).
        bias: The bias vector of shape (output_dim,).
        temperature: The temperature parameter for Gumbel-Softmax.
        top_k: The number of top elements to keep after Gumbel-Softmax.
        alpha: The regularization coefficient for ridge regularization.

    Returns:
        The output tensor of shape (batch_size, output_dim).
    """

    # Adaptive average pooling
    pooled_output = F.adaptive_avg_pool1d(input_tensor, 1)
    pooled_output = pooled_output.squeeze(dim=2)  # (batch_size, input_dim)

    # Gumbel-Softmax sampling
    gumbel_logits = F.gumbel_softmax(pooled_output, tau=temperature, hard=True)
    top_k_values, top_k_indices = torch.topk(gumbel_logits, k=top_k, dim=1)

    # Multinomial sampling
    sampled_indices = torch.multinomial(top_k_values, num_samples=1, replacement=False)
    sampled_indices = torch.gather(top_k_indices, dim=1, index=sampled_indices)  # (batch_size, 1)

    # Ridge regularization
    regularization_loss = alpha * torch.sum(torch.square(weight))

    # Matrix multiplication with bias
    output = torch.matmul(gumbel_logits, weight.t()) + bias
    output = F.relu(output)  # ReLU activation

    return output

function_signature = {
    "name": "complex_function",
    "inputs": [
        ((4, 10, 16), torch.float32),
        ((8, 16), torch.float32),
        ((8,), torch.float32)
    ],
    "outputs": [
        ((4, 8), torch.float32),
    ]
}
```

## func.cu

```c++
#include <cuda_runtime.h>
#include <cuda_bf16.h>
#include <device_launch_parameters.h>
#include <stdarg.h>

// Helper function to convert float to __nv_bfloat16
__device__ __forceinline__ __nv_bfloat16 float_to_bfloat16(float f) {
    return __float2bfloat16(f);
}

// Helper function to convert __nv_bfloat16 to float
__device__ __forceinline__ float bfloat16_to_float(__nv_bfloat16 bf) {
    return __bfloat162float(bf);
}

// CUDA kernel for adaptive average pooling
__global__ void adaptive_avg_pool1d_kernel(const float* input_tensor, float* pooled_output, 
                                            int batch_size, int seq_len, int input_dim) {
    int row = blockIdx.y * blockDim.y + threadIdx.y;
    int col = blockIdx.x * blockDim.x + threadIdx.x;

    if (row < batch_size && col < input_dim) {
        float sum = 0.0f;
        for (int i = 0; i < seq_len; ++i) {
            sum += input_tensor[row * seq_len * input_dim + i * input_dim + col];
        }
        pooled_output[row * input_dim + col] = sum / seq_len;
    }
}

// CUDA kernel for Gumbel-Softmax sampling
__global__ void gumbel_softmax_kernel(const float* logits, float* gumbel_logits, 
                                        int batch_size, int input_dim, float temperature) {
    int row = blockIdx.y * blockDim.y + threadIdx.y;
    int col = blockIdx.x * blockDim.x + threadIdx.x;

    if (row < batch_size && col < input_dim) {
        float g = -logf(-logf((float)rand() / RAND_MAX));
        float gumbel_value = logits[row * input_dim + col] + g;
        gumbel_logits[row * input_dim + col] = expf(gumbel_value / temperature) /
                                                  expf(gumbel_value / temperature); 
    }
}

// CUDA kernel for top-k selection
__global__ void top_k_selection_kernel(const float* gumbel_logits, float* top_k_values, int* top_k_indices,
                                         int batch_size, int input_dim, int top_k) {
    int row = blockIdx.y * blockDim.y + threadIdx.y;
    int col = blockIdx.x * blockDim.x + threadIdx.x;

    if (row < batch_size && col < top_k) {
        int index = row * input_dim + col;
        float max_value = -FLT_MAX;
        int max_index = -1;
        for (int i = 0; i < input_dim; ++i) {
            if (gumbel_logits[index] > max_value) {
                max_value = gumbel_logits[index];
                max_index = i;
            }
            index += input_dim;
        }
        top_k_values[row * top_k + col] = max_value;
        top_k_indices[row * top_k + col] = max_index;
    }
}

// CUDA kernel for multinomial sampling
__global__ void multinomial_sampling_kernel(const float* top_k_values, int* sampled_indices, 
                                             int batch_size, int top_k) {
    int row = blockIdx.y * blockDim.y + threadIdx.y;

    if (row < batch_size) {
        int index = row * top_k;
        float sum = 0.0f;
        for (int i = 0; i < top_k; ++i) {
            sum += top_k_values[index + i];
        }
        float random_value = (float)rand() / RAND_MAX;
        float current_sum = 0.0f;
        for (int i = 0; i < top_k; ++i) {
            current_sum += top_k_values[index + i] / sum;
            if (random_value < current_sum) {
                sampled_indices[row] = i;
                break;
            }
        }
    }
}

// CUDA kernel for gather operation
__global__ void gather_kernel(const int* top_k_indices, const int* sampled_indices, int* gathered_indices,
                                 int batch_size, int top_k) {
    int row = blockIdx.y * blockDim.y + threadIdx.y;

    if (row < batch_size) {
        int index = row * top_k;
        gathered_indices[row] = top_k_indices[index + sampled_indices[row]];
    }
}

// CUDA kernel for matrix multiplication with bias and ReLU activation
__global__ void matmul_bias_relu_kernel(const float* gumbel_logits, const float* weight, const float* bias,
                                         float* output, int batch_size, int output_dim, int input_dim,
                                         float alpha) {
    int row = blockIdx.y * blockDim.y + threadIdx.y;
    int col = blockIdx.x * blockDim.x + threadIdx.x;

    if (row < batch_size && col < output_dim) {
        float sum = 0.0f;
        for (int i = 0; i < input_dim; ++i) {
            sum += gumbel_logits[row * input_dim + i] * weight[col * input_dim + i];
        }
        output[row * output_dim + col] = fmaxf(sum + bias[col], 0.0f);
        // Ridge regularization (not included in output)
        // ...
    }
}

extern "C" {

void complex_function(int num_args, ...) {
    va_list args;
    va_start(args, num_args);

    // Extract input tensors
    const float* input_tensor = va_arg(args, const float*);
    int input_tensor_dim0 = va_arg(args, int);
    int input_tensor_dim1 = va_arg(args, int);
    int input_tensor_dim2 = va_arg(args, int);

    const float* weight = va_arg(args, const float*);
    int weight_dim0 = va_arg(args, int);
    int weight_dim1 = va_arg(args, int);

    const float* bias = va_arg(args, const float*);
    int bias_dim = va_arg(args, int);

    // Extract temperature
    float temperature = va_arg(args, double);

    // Extract top_k
    int top_k = va_arg(args, int);

    // Extract alpha
    float alpha = va_arg(args, double);

    // Extract output tensor (assuming it's preallocated)
    float* output = va_arg(args, float*);

    va_end(args);

    int batch_size = input_tensor_dim0;
    int seq_len = input_tensor_dim1;
    int input_dim = input_tensor_dim2;
    int output_dim = weight_dim0;

    // Allocate device memory
    float *d_input, *d_weight, *d_bias, *d_pooled_output, *d_gumbel_logits, *d_top_k_values;
    int *d_top_k_indices, *d_sampled_indices, *d_gathered_indices;
    cudaMalloc(&d_input, batch_size * seq_len * input_dim * sizeof(float));
    cudaMalloc(&d_weight, output_dim * input_dim * sizeof(float));
    cudaMalloc(&d_bias, output_dim * sizeof(float));
    cudaMalloc(&d_pooled_output, batch_size * input_dim * sizeof(float));
    cudaMalloc(&d_gumbel_logits, batch_size * input_dim * sizeof(float));
    cudaMalloc(&d_top_k_values, batch_size * top_k * sizeof(float));
    cudaMalloc(&d_top_k_indices, batch_size * top_k * sizeof(int));
    cudaMalloc(&d_sampled_indices, batch_size * sizeof(int));
    cudaMalloc(&d_gathered_indices, batch_size * sizeof(int));

    // Copy input data to device
    cudaMemcpy(d_input, input_tensor, batch_size * seq_len * input_dim * sizeof(float), cudaMemcpyHostToDevice);
    cudaMemcpy(d_weight, weight, output_dim * input_dim * sizeof(float), cudaMemcpyHostToDevice);
    cudaMemcpy(d_bias, bias, output_dim * sizeof(float), cudaMemcpyHostToDevice);

    // Launch adaptive average pooling kernel
    dim3 threadsPerBlock(16, 16);
    dim3 numBlocks((input_dim + threadsPerBlock.x - 1) / threadsPerBlock.x, 
                   (batch_size + threadsPerBlock.y - 1) / threadsPerBlock.y);
    adaptive_avg_pool1d_kernel<<<numBlocks, threadsPerBlock>>>(d_input, d_pooled_output, 
                                                            batch_size, seq_len, input_dim);

    // Launch Gumbel-Softmax sampling kernel
    gumbel_softmax_kernel<<<numBlocks, threadsPerBlock>>>(d_pooled_output, d_gumbel_logits,
                                                          batch_size, input_dim, temperature);

    // Launch top-k selection kernel
    top_k_selection_kernel<<<numBlocks, threadsPerBlock>>>(d_gumbel_logits, d_top_k_values, d_top_k_indices,
                                                           batch_size, input_dim, top_k);

    // Launch multinomial sampling kernel
    numBlocks = (batch_size + threadsPerBlock.y - 1) / threadsPerBlock.y;
    multinomial_sampling_kernel<<<numBlocks, threadsPerBlock>>>(d_top_k_values, d_sampled_indices, 
                                                               batch_size, top_k);

    // Launch gather kernel
    gather_kernel<<<numBlocks, threadsPerBlock>>>(d_top_k_indices, d_sampled_indices, d_gathered_indices,
                                                    batch_size, top_k);

    // Launch matrix multiplication with bias and ReLU kernel
    numBlocks = (output_dim + threadsPerBlock.x - 1) / threadsPerBlock.x;
    matmul_bias_relu_kernel<<<numBlocks, threadsPerBlock>>>(d_gumbel_logits, d_weight, d_bias, 
                                                             d_output, batch_size, output_dim, 
                                                             input_dim, alpha);

    // Copy result back to host
    cudaMemcpy(output, d_output, batch_size * output_dim * sizeof(float), cudaMemcpyDeviceToHost);

    // Free device memory
    cudaFree(d_input);
    cudaFree(d_weight);
    cudaFree(d_bias);
    cudaFree(d_pooled_output);
    cudaFree(d_gumbel_logits);
    cudaFree(d_top_k_values);
    cudaFree(d_top_k_indices);
    cudaFree(d_sampled_indices);
    cudaFree(d_gathered_indices);
}

}  // extern "C"
```