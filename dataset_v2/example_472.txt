## func.py

```python
import torch

def complex_function(input_tensor: torch.Tensor, weight: torch.Tensor) -> tuple[torch.Tensor, torch.Tensor]:
    """
    Performs a series of operations on the input tensor.
    """
    # Reshape input tensor
    reshaped_input = input_tensor.view(input_tensor.size(0), -1)

    # Linear transformation
    output = torch.matmul(reshaped_input, weight.t())

    # Swish activation
    output = output * torch.sigmoid(output)

    # ELU activation
    output = torch.where(output > 0, output, torch.exp(output) - 1)

    # Cumulative product along the last dimension
    cumulative_product = torch.cumprod(output, dim=1)

    return output, cumulative_product

function_signature = {
    "name": "complex_function",
    "inputs": [
        ((4, 4, 4), torch.float32),
        ((4, 16), torch.float32)
    ],
    "outputs": [
        ((4, 16), torch.float32),
        ((4, 16), torch.float32),
    ]
}
```

## func.cu

```c++
#include <cuda_runtime.h>
#include <device_launch_parameters.h>
#include <stdarg.h>

// CUDA kernel for complex function operations
__global__ void complex_function_kernel(const float* input_tensor, const float* weight, float* output, float* cumulative_product,
                                        int batch_size, int input_dim, int output_dim) {
    int row = blockIdx.y * blockDim.y + threadIdx.y;
    int col = blockIdx.x * blockDim.x + threadIdx.x;

    if (row < batch_size && col < output_dim) {
        float sum = 0.0f;
        for (int i = 0; i < input_dim; ++i) {
            sum += input_tensor[row * input_dim + i] * weight[col * input_dim + i];
        }

        // Swish activation
        float sigmoid_output = 1.0f / (1.0f + expf(-sum));
        output[row * output_dim + col] = sum * sigmoid_output;

        // ELU activation
        output[row * output_dim + col] = (output[row * output_dim + col] > 0.0f) ? output[row * output_dim + col] : expf(output[row * output_dim + col]) - 1.0f;

        // Cumulative product along the last dimension
        if (col == 0) {
            cumulative_product[row * output_dim + col] = output[row * output_dim + col];
        } else {
            cumulative_product[row * output_dim + col] = cumulative_product[row * output_dim + col - 1] * output[row * output_dim + col];
        }
    }
}

extern "C" {

void complex_function(int num_args, ...) {
    va_list args;
    va_start(args, num_args);

    // Extract input tensor
    const float* input_tensor = va_arg(args, const float*);
    int input_tensor_dim0 = va_arg(args, int);
    int input_tensor_dim1 = va_arg(args, int);
    int input_tensor_dim2 = va_arg(args, int);

    // Extract weight tensor
    const float* weight = va_arg(args, const float*);
    int weight_dim0 = va_arg(args, int);
    int weight_dim1 = va_arg(args, int);

    // Extract output tensors (assuming preallocated)
    float* output = va_arg(args, float*);
    float* cumulative_product = va_arg(args, float*);

    va_end(args);

    int batch_size = input_tensor_dim0;
    int input_dim = input_tensor_dim1 * input_tensor_dim2;
    int output_dim = weight_dim0;

    // Allocate device memory
    float *d_input, *d_weight, *d_output, *d_cumulative_product;
    cudaMalloc(&d_input, batch_size * input_dim * sizeof(float));
    cudaMalloc(&d_weight, output_dim * input_dim * sizeof(float));
    cudaMalloc(&d_output, batch_size * output_dim * sizeof(float));
    cudaMalloc(&d_cumulative_product, batch_size * output_dim * sizeof(float));

    // Copy input data to device
    cudaMemcpy(d_input, input_tensor, batch_size * input_dim * sizeof(float), cudaMemcpyHostToDevice);
    cudaMemcpy(d_weight, weight, output_dim * input_dim * sizeof(float), cudaMemcpyHostToDevice);

    // Launch kernel
    dim3 threadsPerBlock(32, 8);
    dim3 numBlocks((output_dim + threadsPerBlock.x - 1) / threadsPerBlock.x,
                   (batch_size + threadsPerBlock.y - 1) / threadsPerBlock.y);

    complex_function_kernel<<<numBlocks, threadsPerBlock>>>(
        d_input, d_weight, d_output, d_cumulative_product, batch_size, input_dim, output_dim
    );

    // Copy results back to host
    cudaMemcpy(output, d_output, batch_size * output_dim * sizeof(float), cudaMemcpyDeviceToHost);
    cudaMemcpy(cumulative_product, d_cumulative_product, batch_size * output_dim * sizeof(float), cudaMemcpyDeviceToHost);

    // Free device memory
    cudaFree(d_input);
    cudaFree(d_weight);
    cudaFree(d_output);
    cudaFree(d_cumulative_product);
}

} // extern "C"
```