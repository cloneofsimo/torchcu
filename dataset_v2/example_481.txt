```python
import torch

def layer_norm_function(input_tensor: torch.Tensor, weight: torch.Tensor, bias: torch.Tensor) -> torch.Tensor:
    """
    Performs layer normalization with learned affine parameters.
    """
    mean = input_tensor.mean(-1, keepdim=True)
    variance = input_tensor.var(-1, keepdim=True, unbiased=False)
    normalized = (input_tensor - mean) / torch.sqrt(variance + 1e-5)
    output = normalized * weight + bias
    return output

function_signature = {
    "name": "layer_norm_function",
    "inputs": [
        ((4, 4), torch.float32),
        ((4,), torch.float32),
        ((4,), torch.float32)
    ],
    "outputs": [
        ((4, 4), torch.float32),
    ]
}
```

```c++
#include <cuda_runtime.h>
#include <device_launch_parameters.h>
#include <stdarg.h>

// CUDA kernel for layer normalization
__global__ void layer_norm_kernel(const float* input_tensor, const float* weight, const float* bias, float* output,
                                 int batch_size, int feature_dim) {
    int idx = blockIdx.x * blockDim.x + threadIdx.x;
    if (idx < batch_size * feature_dim) {
        int batch = idx / feature_dim;
        int feature = idx % feature_dim;

        // Calculate mean and variance
        float sum = 0.0f;
        for (int i = 0; i < feature_dim; ++i) {
            sum += input_tensor[batch * feature_dim + i];
        }
        float mean = sum / feature_dim;

        float sum_sq = 0.0f;
        for (int i = 0; i < feature_dim; ++i) {
            sum_sq += (input_tensor[batch * feature_dim + i] - mean) * (input_tensor[batch * feature_dim + i] - mean);
        }
        float variance = sum_sq / feature_dim;

        // Normalize
        output[idx] = (input_tensor[idx] - mean) / sqrtf(variance + 1e-5f);
        output[idx] = output[idx] * weight[feature] + bias[feature];
    }
}

extern "C" {

void layer_norm_function(int num_args, ...) {
    va_list args;
    va_start(args, num_args);

    // Extract input tensor
    const float* input_tensor = va_arg(args, const float*);
    int input_tensor_dim0 = va_arg(args, int);
    int input_tensor_dim1 = va_arg(args, int);

    // Extract weight tensor
    const float* weight = va_arg(args, const float*);
    int weight_dim = va_arg(args, int);

    // Extract bias tensor
    const float* bias = va_arg(args, const float*);
    int bias_dim = va_arg(args, int);

    // Extract output tensor (assuming it's preallocated)
    float* output = va_arg(args, float*);

    va_end(args);

    int batch_size = input_tensor_dim0;
    int feature_dim = input_tensor_dim1;

    // Allocate device memory
    float *d_input, *d_weight, *d_bias, *d_output;
    cudaMalloc(&d_input, batch_size * feature_dim * sizeof(float));
    cudaMalloc(&d_weight, feature_dim * sizeof(float));
    cudaMalloc(&d_bias, feature_dim * sizeof(float));
    cudaMalloc(&d_output, batch_size * feature_dim * sizeof(float));

    // Copy input data to device
    cudaMemcpy(d_input, input_tensor, batch_size * feature_dim * sizeof(float), cudaMemcpyHostToDevice);
    cudaMemcpy(d_weight, weight, feature_dim * sizeof(float), cudaMemcpyHostToDevice);
    cudaMemcpy(d_bias, bias, feature_dim * sizeof(float), cudaMemcpyHostToDevice);

    // Launch kernel
    dim3 threadsPerBlock(256);
    dim3 numBlocks((batch_size * feature_dim + threadsPerBlock.x - 1) / threadsPerBlock.x);

    layer_norm_kernel<<<numBlocks, threadsPerBlock>>>(
        d_input, d_weight, d_bias, d_output, batch_size, feature_dim
    );

    // Copy result back to host
    cudaMemcpy(output, d_output, batch_size * feature_dim * sizeof(float), cudaMemcpyDeviceToHost);

    // Free device memory
    cudaFree(d_input);
    cudaFree(d_weight);
    cudaFree(d_bias);
    cudaFree(d_output);
}

}  // extern "C"

```

```c++
#include <cuda_runtime.h>
#include <device_launch_parameters.h>
#include <stdarg.h> 

// CUDA kernel for layer normalization
__global__ void layer_norm_kernel(const float* input_tensor, const float* weight, const float* bias, float* output,
                                 int batch_size, int feature_dim) {
    int idx = blockIdx.x * blockDim.x + threadIdx.x;
    if (idx < batch_size * feature_dim) {
        int batch = idx / feature_dim;
        int feature = idx % feature_dim;

        // Calculate mean and variance
        float sum = 0.0f;
        for (int i = 0; i < feature_dim; ++i) {
            sum += input_tensor[batch * feature_dim + i];
        }
        float mean = sum / feature_dim;

        float sum_sq = 0.0f;
        for (int i = 0; i < feature_dim; ++i) {
            sum_sq += (input_tensor[batch * feature_dim + i] - mean) * (input_tensor[batch * feature_dim + i] - mean);
        }
        float variance = sum_sq / feature_dim;

        // Normalize
        output[idx] = (input_tensor[idx] - mean) / sqrtf(variance + 1e-5f);
        output[idx] = output[idx] * weight[feature] + bias[feature];
    }
}

extern "C" {

void layer_norm_function(int num_args, ...) {
    va_list args;
    va_start(args, num_args);

    // Extract input tensor
    const float* input_tensor = va_arg(args, const float*);
    int input_tensor_dim0 = va_arg(args, int);
    int input_tensor_dim1 = va_arg(args, int);

    // Extract weight tensor
    const float* weight = va_arg(args, const float*);
    int weight_dim = va_arg(args, int);

    // Extract bias tensor
    const float* bias = va_arg(args, const float*);
    int bias_dim = va_arg(args, int);

    // Extract output tensor (assuming it's preallocated)
    float* output = va_arg(args, float*);

    va_end(args);

    int batch_size = input_tensor_dim0;
    int feature_dim = input_tensor_dim1;

    // Allocate device memory
    float *d_input, *d_weight, *d_bias, *d_output;
    cudaMalloc(&d_input, batch_size * feature_dim * sizeof(float));
    cudaMalloc(&d_weight, feature_dim * sizeof(float));
    cudaMalloc(&d_bias, feature_dim * sizeof(float));
    cudaMalloc(&d_output, batch_size * feature_dim * sizeof(float));

    // Copy input data to device
    cudaMemcpy(d_input, input_tensor, batch_size * feature_dim * sizeof(float), cudaMemcpyHostToDevice);
    cudaMemcpy(d_weight, weight, feature_dim * sizeof(float), cudaMemcpyHostToDevice);
    cudaMemcpy(d_bias, bias, feature_dim * sizeof(float), cudaMemcpyHostToDevice);

    // Launch kernel
    dim3 threadsPerBlock(256);
    dim3 numBlocks((batch_size * feature_dim + threadsPerBlock.x - 1) / threadsPerBlock.x);

    layer_norm_kernel<<<numBlocks, threadsPerBlock>>>(
        d_input, d_weight, d_bias, d_output, batch_size, feature_dim
    );

    // Copy result back to host
    cudaMemcpy(output, d_output, batch_size * feature_dim * sizeof(float), cudaMemcpyDeviceToHost);

    // Free device memory
    cudaFree(d_input);
    cudaFree(d_weight);
    cudaFree(d_bias);
    cudaFree(d_output);
}

}  // extern "C"

```