```python
import torch
import torch.nn.functional as F

def my_function(input_tensor: torch.Tensor, weight: torch.Tensor, pruning_mask: torch.Tensor, lambda_orth: float) -> torch.Tensor:
    """
    Applies a linear transformation, applies a pruning mask, calculates orthogonal regularization loss, and returns the output.
    """
    # Linear transformation
    output = torch.matmul(input_tensor, weight.t())

    # Apply pruning mask
    masked_weight = weight * pruning_mask
    output = torch.matmul(input_tensor, masked_weight.t())

    # Orthogonal regularization
    eigenvalues = torch.linalg.eigvals(torch.matmul(masked_weight.t(), masked_weight))
    orthogonal_loss = 0.5 * lambda_orth * torch.sum((eigenvalues - 1.0) ** 2)

    return output, orthogonal_loss

function_signature = {
    "name": "my_function",
    "inputs": [
        ((4, 4), torch.float32),
        ((4, 4), torch.float32),
        ((4, 4), torch.bool),
        (torch.float32,)  # Lambda orth is a scalar
    ],
    "outputs": [
        ((4, 4), torch.float32),
        ((), torch.float32),
    ]
}
```

```c++
#include <cuda_runtime.h>
#include <device_launch_parameters.h>
#include <stdarg.h>
#include <math.h>

// Helper function for calculating the square of a number
__device__ inline float square(float x) {
  return x * x;
}

// CUDA kernel for matrix multiplication
__global__ void matmul_kernel(const float* input_tensor, const float* weight, float* output,
                             int m, int n, int k) {
  int row = blockIdx.y * blockDim.y + threadIdx.y;
  int col = blockIdx.x * blockDim.x + threadIdx.x;

  if (row < m && col < n) {
    float sum = 0.0f;
    for (int i = 0; i < k; ++i) {
      sum += input_tensor[row * k + i] * weight[col * k + i];
    }
    output[row * n + col] = sum;
  }
}

// CUDA kernel for applying pruning mask
__global__ void apply_pruning_mask_kernel(const float* weight, const bool* pruning_mask, float* masked_weight,
                                       int m, int n) {
  int row = blockIdx.y * blockDim.y + threadIdx.y;
  int col = blockIdx.x * blockDim.x + threadIdx.x;

  if (row < m && col < n) {
    masked_weight[row * n + col] = weight[row * n + col] * pruning_mask[row * n + col];
  }
}

// CUDA kernel for calculating orthogonal regularization loss
__global__ void orthogonal_loss_kernel(const float* masked_weight, float* eigenvalues,
                                        int m, int n, float lambda_orth) {
  int row = blockIdx.y * blockDim.y + threadIdx.y;
  int col = blockIdx.x * blockDim.x + threadIdx.x;

  if (row < m && col < n) {
    float sum = 0.0f;
    for (int i = 0; i < n; ++i) {
      sum += masked_weight[row * n + i] * masked_weight[col * n + i];
    }
    eigenvalues[row * n + col] = sum;
  }

  if (row == col) {
    eigenvalues[row * n + col] -= 1.0f;
    eigenvalues[row * n + col] = square(eigenvalues[row * n + col]);
  }
}

extern "C" {

void my_function(int num_args, ...) {
  va_list args;
  va_start(args, num_args);

  // Extract input tensors
  const float* input_tensor = va_arg(args, const float*);
  int input_tensor_dim0 = va_arg(args, int);
  int input_tensor_dim1 = va_arg(args, int);

  const float* weight = va_arg(args, const float*);
  int weight_dim0 = va_arg(args, int);
  int weight_dim1 = va_arg(args, int);

  const bool* pruning_mask = va_arg(args, const bool*);
  int pruning_mask_dim0 = va_arg(args, int);
  int pruning_mask_dim1 = va_arg(args, int);

  float lambda_orth = (float)va_arg(args, double);

  // Extract output tensors (assuming they're preallocated)
  float* output = va_arg(args, float*);
  float* orthogonal_loss = va_arg(args, float*);

  va_end(args);

  int batch_size = input_tensor_dim0;
  int input_dim = input_tensor_dim1;
  int output_dim = weight_dim0;

  // Allocate device memory
  float *d_input, *d_weight, *d_output, *d_masked_weight, *d_eigenvalues;
  cudaMalloc(&d_input, batch_size * input_dim * sizeof(float));
  cudaMalloc(&d_weight, output_dim * input_dim * sizeof(float));
  cudaMalloc(&d_output, batch_size * output_dim * sizeof(float));
  cudaMalloc(&d_masked_weight, output_dim * input_dim * sizeof(float));
  cudaMalloc(&d_eigenvalues, output_dim * output_dim * sizeof(float));

  // Copy input data to device
  cudaMemcpy(d_input, input_tensor, batch_size * input_dim * sizeof(float), cudaMemcpyHostToDevice);
  cudaMemcpy(d_weight, weight, output_dim * input_dim * sizeof(float), cudaMemcpyHostToDevice);
  cudaMemcpy(d_masked_weight, weight, output_dim * input_dim * sizeof(float), cudaMemcpyHostToDevice);
  cudaMemcpy(d_eigenvalues, weight, output_dim * input_dim * sizeof(float), cudaMemcpyHostToDevice);

  // Launch kernel for matrix multiplication
  dim3 threadsPerBlock(16, 16);
  dim3 numBlocks((output_dim + threadsPerBlock.x - 1) / threadsPerBlock.x,
                  (batch_size + threadsPerBlock.y - 1) / threadsPerBlock.y);
  matmul_kernel<<<numBlocks, threadsPerBlock>>>(d_input, d_weight, d_output, batch_size, output_dim, input_dim);

  // Launch kernel for applying pruning mask
  numBlocks = ((output_dim + threadsPerBlock.x - 1) / threadsPerBlock.x,
               (input_dim + threadsPerBlock.y - 1) / threadsPerBlock.y);
  apply_pruning_mask_kernel<<<numBlocks, threadsPerBlock>>>(d_weight, pruning_mask, d_masked_weight, output_dim, input_dim);

  // Launch kernel for calculating orthogonal regularization loss
  numBlocks = ((output_dim + threadsPerBlock.x - 1) / threadsPerBlock.x,
               (output_dim + threadsPerBlock.y - 1) / threadsPerBlock.y);
  orthogonal_loss_kernel<<<numBlocks, threadsPerBlock>>>(d_masked_weight, d_eigenvalues, output_dim, input_dim, lambda_orth);

  // Copy results back to host
  cudaMemcpy(output, d_output, batch_size * output_dim * sizeof(float), cudaMemcpyDeviceToHost);
  cudaMemcpy(orthogonal_loss, d_eigenvalues, output_dim * output_dim * sizeof(float), cudaMemcpyDeviceToHost);

  // Free device memory
  cudaFree(d_input);
  cudaFree(d_weight);
  cudaFree(d_output);
  cudaFree(d_masked_weight);
  cudaFree(d_eigenvalues);
}

} // extern "C"
```

```c++
#include <cuda_runtime.h>
#include <device_launch_parameters.h>
#include <stdarg.h>
#include <math.h>

// Helper function for calculating the square of a number
__device__ inline float square(float x) {
  return x * x;
}

// CUDA kernel for matrix multiplication
__global__ void matmul_kernel(const float* input_tensor, const float* weight, float* output,
                             int m, int n, int k) {
  int row = blockIdx.y * blockDim.y + threadIdx.y;
  int col = blockIdx.x * blockDim.x + threadIdx.x;

  if (row < m && col < n) {
    float sum = 0.0f;
    for (int i = 0; i < k; ++i) {
      sum += input_tensor[row * k + i] * weight[col * k + i];
    }
    output[row * n + col] = sum;
  }
}

// CUDA kernel for applying pruning mask
__global__ void apply_pruning_mask_kernel(const float* weight, const bool* pruning_mask, float* masked_weight,
                                       int m, int n) {
  int row = blockIdx.y * blockDim.y + threadIdx.y;
  int col = blockIdx.x * blockDim.x + threadIdx.x;

  if (row < m && col < n) {
    masked_weight[row * n + col] = weight[row * n + col] * pruning_mask[row * n + col];
  }
}

// CUDA kernel for calculating orthogonal regularization loss
__global__ void orthogonal_loss_kernel(const float* masked_weight, float* eigenvalues,
                                        int m, int n, float lambda_orth) {
  int row = blockIdx.y * blockDim.y + threadIdx.y;
  int col = blockIdx.x * blockDim.x + threadIdx.x;

  if (row < m && col < n) {
    float sum = 0.0f;
    for (int i = 0; i < n; ++i) {
      sum += masked_weight[row * n + i] * masked_weight[col * n + i];
    }
    eigenvalues[row * n + col] = sum;
  }

  if (row == col) {
    eigenvalues[row * n + col] -= 1.0f;
    eigenvalues[row * n + col] = square(eigenvalues[row * n + col]);
  }
}

extern "C" {

void my_function(int num_args, ...) {
  va_list args;
  va_start(args, num_args);

  // Extract input tensors
  const float* input_tensor = va_arg(args, const float*);
  int input_tensor_dim0 = va_arg(args, int);
  int input_tensor_dim1 = va_arg(args, int);

  const float* weight = va_arg(args, const float*);
  int weight_dim0 = va_arg(args, int);
  int weight_dim1 = va_arg(args, int);

  const bool* pruning_mask = va_arg(args, const bool*);
  int pruning_mask_dim0 = va_arg(args, int);
  int pruning_mask_dim1 = va_arg(args, int);

  float lambda_orth = (float)va_arg(args, double);

  // Extract output tensors (assuming they're preallocated)
  float* output = va_arg(args, float*);
  float* orthogonal_loss = va_arg(args, float*);

  va_end(args);

  int batch_size = input_tensor_dim0;
  int input_dim = input_tensor_dim1;
  int output_dim = weight_dim0;

  // Allocate device memory
  float *d_input, *d_weight, *d_output, *d_masked_weight, *d_eigenvalues;
  cudaMalloc(&d_input, batch_size * input_dim * sizeof(float));
  cudaMalloc(&d_weight, output_dim * input_dim * sizeof(float));
  cudaMalloc(&d_output, batch_size * output_dim * sizeof(float));
  cudaMalloc(&d_masked_weight, output_dim * input_dim * sizeof(float));
  cudaMalloc(&d_eigenvalues, output_dim * output_dim * sizeof(float));

  // Copy input data to device
  cudaMemcpy(d_input, input_tensor, batch_size * input_dim * sizeof(float), cudaMemcpyHostToDevice);
  cudaMemcpy(d_weight, weight, output_dim * input_dim * sizeof(float), cudaMemcpyHostToDevice);
  cudaMemcpy(d_masked_weight, weight, output_dim * input_dim * sizeof(float), cudaMemcpyHostToDevice);
  cudaMemcpy(d_eigenvalues, weight, output_dim * input_dim * sizeof(float), cudaMemcpyHostToDevice);

  // Launch kernel for matrix multiplication
  dim3 threadsPerBlock(16, 16);
  dim3 numBlocks((output_dim + threadsPerBlock.x - 1) / threadsPerBlock.x,
                  (batch_size + threadsPerBlock.y - 1) / threadsPerBlock.y);
  matmul_kernel<<<numBlocks, threadsPerBlock>>>(d_input, d_weight, d_output, batch_size, output_dim, input_dim);

  // Launch kernel for applying pruning mask
  numBlocks = ((output_dim + threadsPerBlock.x - 1) / threadsPerBlock.x,
               (input_dim + threadsPerBlock.y - 1) / threadsPerBlock.y);
  apply_pruning_mask_kernel<<<numBlocks, threadsPerBlock>>>(d_weight, pruning_mask, d_masked_weight, output_dim, input_dim);

  // Launch kernel for calculating orthogonal regularization loss
  numBlocks = ((output_dim + threadsPerBlock.x - 1) / threadsPerBlock.x,
               (output_dim + threadsPerBlock.y - 1) / threadsPerBlock.y);
  orthogonal_loss_kernel<<<numBlocks, threadsPerBlock>>>(d_masked_weight, d_eigenvalues, output_dim, input_dim, lambda_orth);

  // Copy results back to host
  cudaMemcpy(output, d_output, batch_size * output_dim * sizeof(float), cudaMemcpyDeviceToHost);
  cudaMemcpy(orthogonal_loss, d_eigenvalues, output_dim * output_dim * sizeof(float), cudaMemcpyDeviceToHost);

  // Free device memory
  cudaFree(d_input);
  cudaFree(d_weight);
  cudaFree(d_output);
  cudaFree(d_masked_weight);
  cudaFree(d_eigenvalues);
}

} // extern "C"
```

```c++
#include <cuda_runtime.h>
#include <device_launch_parameters.h>
#include <stdarg.h>
#include <math.h>

// Helper function for calculating the square of a number
__device__ inline float square(float x) {
  return x * x;
}

// CUDA kernel for matrix multiplication
__global__ void matmul_kernel(const float* input_tensor, const float* weight, float* output,
                             int m, int n, int k) {
  int row = blockIdx.y * blockDim.y + threadIdx.y;
  int col = blockIdx.x * blockDim.x + threadIdx.x;

  if (row < m && col < n) {
    float sum = 0.0f;
    for (int i = 0; i < k; ++i) {
      sum += input_tensor[row * k + i] * weight[col * k + i];
    }
    output[row * n + col] = sum;
  }
}

// CUDA kernel for applying pruning mask
__global__ void apply_pruning_mask_kernel(const float* weight, const bool* pruning_mask, float* masked_weight,
                                       int m, int n) {
  int row = blockIdx.y * blockDim.y + threadIdx.y;
  int col = blockIdx.x * blockDim.x + threadIdx.x;

  if (row < m && col < n) {
    masked_weight[row * n + col] = weight[row * n + col] * pruning_mask[row * n + col];
  }
}

// CUDA kernel for calculating orthogonal regularization loss
__global__ void orthogonal_loss_kernel(const float* masked_weight, float* eigenvalues,
                                        int m, int n, float lambda_orth) {
  int row = blockIdx.y * blockDim.y + threadIdx.y;
  int col = blockIdx.x * blockDim.x + threadIdx.x;

  if (row < m && col < n) {
    float sum = 0.0f;
    for (int i = 0; i < n; ++i) {
      sum += masked_weight[row * n + i] * masked_weight[col * n + i];
    }
    eigenvalues[row * n + col] = sum;
  }

  if (row == col) {
    eigenvalues[row * n + col] -= 1.0f;
    eigenvalues[row * n + col] = square(eigenvalues[row * n + col]);
  }
}

extern "C" {

void my_function(int num_args, ...) {
  va_list args;
  va_start(args, num_args);

  // Extract input tensors
  const float* input_tensor = va_arg(args, const float*);
  int input_tensor_dim0 = va_arg(args, int);
  int input_tensor_dim1 = va_arg(args, int);

  const float* weight = va_arg(args, const float*);
  int weight_dim0 = va_arg(args, int);
  int weight_dim1 = va_arg(args, int);

  const bool* pruning_mask = va_arg(args, const bool*);
  int pruning_mask_dim0 = va_arg(args, int);
  int pruning_mask_dim1 = va_arg(args, int);

  float lambda_orth = (float)va_arg(args, double);

  // Extract output tensors (assuming they're preallocated)
  float* output = va_arg(args, float*);
  float* orthogonal_loss = va_arg(args, float*);

  va_end(args);

  int batch_size = input_tensor_dim0;
  int input_dim = input_tensor_dim1;
  int output_dim = weight_dim0;

  // Allocate device memory
  float *d_input, *d_weight, *d_output, *d_masked_weight, *d_eigenvalues;
  cudaMalloc(&d_input, batch_size * input_dim * sizeof(float));
  cudaMalloc(&d_weight, output_dim * input_dim * sizeof(float));
  cudaMalloc(&d_output, batch_size * output_dim * sizeof(float));
  cudaMalloc(&d_masked_weight, output_dim * input_dim * sizeof(float));
  cudaMalloc(&d_eigenvalues, output_dim * output_dim * sizeof(float));

  // Copy input data to device
  cudaMemcpy(d_input, input_tensor, batch_size * input_dim * sizeof(float), cudaMemcpyHostToDevice);
  cudaMemcpy(d_weight, weight, output_dim * input_dim * sizeof(float), cudaMemcpyHostToDevice);
  cudaMemcpy(d_masked_weight, weight, output_dim * input_dim * sizeof(float), cudaMemcpyHostToDevice);
  cudaMemcpy(d_eigenvalues, weight, output_dim * input_dim * sizeof(float), cudaMemcpyHostToDevice);

  // Launch kernel for matrix multiplication
  dim3 threadsPerBlock(16, 16);
  dim3 numBlocks((output_dim + threadsPerBlock.x - 1) / threadsPerBlock.x,
                  (batch_size + threadsPerBlock.y - 1) / threadsPerBlock.y);
  matmul_kernel<<<numBlocks, threadsPerBlock>>>(d_input, d_weight, d_output, batch_size, output_dim, input_dim);

  // Launch kernel for applying pruning mask
  numBlocks = ((output_dim + threadsPerBlock.x - 1) / threadsPerBlock.x,
               (input_dim + threadsPerBlock.y - 1) / threadsPerBlock.y);
  apply_pruning_mask_kernel<<<numBlocks, threadsPerBlock>>>(d_weight, pruning_mask, d_masked_weight, output_dim, input_dim);

  // Launch kernel for calculating orthogonal regularization loss
  numBlocks = ((output_dim + threadsPerBlock.x - 1) / threadsPerBlock.x,
               (output_dim + threadsPerBlock.y - 1) / threadsPerBlock.y);
  orthogonal_loss_kernel<<<numBlocks, threadsPerBlock>>>(d_masked_weight, d_eigenvalues, output_dim, input_dim, lambda_orth);

  // Copy results back to host
  cudaMemcpy(output, d_output, batch_size * output_dim * sizeof(float), cudaMemcpyDeviceToHost);
  cudaMemcpy(orthogonal_loss, d_eigenvalues, output_dim * output_dim * sizeof(float), cudaMemcpyDeviceToHost);

  // Free device memory
  cudaFree(d_input);
  cudaFree(d_weight);
  cudaFree(d_output);
  cudaFree(d_masked_weight);
  cudaFree(d_eigenvalues);
}

} // extern "C"
```