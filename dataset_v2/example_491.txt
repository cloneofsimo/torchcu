## func.py

```python
import torch

def my_complex_function(input_tensor: torch.Tensor, weight1: torch.Tensor, weight2: torch.Tensor, bias: torch.Tensor) -> torch.Tensor:
    """
    Performs a series of operations, including matrix multiplication, hardtanh activation, and element-wise addition. 
    """
    output = torch.matmul(input_tensor, weight1.t())
    output = torch.hardtanh(output, min_val=-2.0, max_val=2.0)
    output = torch.matmul(output, weight2.t())
    output = output + bias
    return output

function_signature = {
    "name": "my_complex_function",
    "inputs": [
        ((4, 4), torch.float32),
        ((4, 4), torch.float32),
        ((4, 4), torch.float32),
        ((4, ), torch.float32)
    ],
    "outputs": [
        ((4, 4), torch.float32),
    ]
}
```

## func.cu

```c++
#include <cuda_runtime.h>
#include <device_launch_parameters.h>
#include <stdarg.h>

// CUDA kernel for matrix multiplication and hardtanh activation
__global__ void matmul_hardtanh_kernel(const float* input_tensor, const float* weight, float* output,
                                        int m, int n, int k, float min_val, float max_val) {
    int row = blockIdx.y * blockDim.y + threadIdx.y;
    int col = blockIdx.x * blockDim.x + threadIdx.x;

    if (row < m && col < n) {
        float sum = 0.0f;
        for (int i = 0; i < k; ++i) {
            sum += input_tensor[row * k + i] * weight[col * k + i];  // Transposed access
        }
        output[row * n + col] = fminf(fmaxf(sum, min_val), max_val);  // Hardtanh activation
    }
}

// CUDA kernel for matrix multiplication and addition
__global__ void matmul_add_kernel(const float* input_tensor, const float* weight, const float* bias, float* output,
                                        int m, int n, int k) {
    int row = blockIdx.y * blockDim.y + threadIdx.y;
    int col = blockIdx.x * blockDim.x + threadIdx.x;

    if (row < m && col < n) {
        float sum = 0.0f;
        for (int i = 0; i < k; ++i) {
            sum += input_tensor[row * k + i] * weight[col * k + i];  // Transposed access
        }
        output[row * n + col] = sum + bias[col]; // Add bias
    }
}


extern "C" {

void my_complex_function(int num_args, ...) {
    va_list args;
    va_start(args, num_args);

    // Extract input tensor
    const float* input_tensor = va_arg(args, const float*);
    int input_tensor_dim0 = va_arg(args, int);
    int input_tensor_dim1 = va_arg(args, int);

    // Extract weight1 tensor
    const float* weight1 = va_arg(args, const float*);
    int weight1_dim0 = va_arg(args, int);
    int weight1_dim1 = va_arg(args, int);

    // Extract weight2 tensor
    const float* weight2 = va_arg(args, const float*);
    int weight2_dim0 = va_arg(args, int);
    int weight2_dim1 = va_arg(args, int);

    // Extract bias tensor
    const float* bias = va_arg(args, const float*);
    int bias_dim = va_arg(args, int);

    // Extract output tensor (assuming it's preallocated)
    float* output = va_arg(args, float*);

    va_end(args);

    int batch_size = input_tensor_dim0;
    int input_dim = input_tensor_dim1;
    int output_dim = weight2_dim0;

    // Allocate device memory
    float *d_input, *d_weight1, *d_weight2, *d_bias, *d_output;
    cudaMalloc(&d_input, batch_size * input_dim * sizeof(float));
    cudaMalloc(&d_weight1, weight1_dim0 * weight1_dim1 * sizeof(float));
    cudaMalloc(&d_weight2, weight2_dim0 * weight2_dim1 * sizeof(float));
    cudaMalloc(&d_bias, output_dim * sizeof(float));
    cudaMalloc(&d_output, batch_size * output_dim * sizeof(float));

    // Copy input data to device
    cudaMemcpy(d_input, input_tensor, batch_size * input_dim * sizeof(float), cudaMemcpyHostToDevice);
    cudaMemcpy(d_weight1, weight1, weight1_dim0 * weight1_dim1 * sizeof(float), cudaMemcpyHostToDevice);
    cudaMemcpy(d_weight2, weight2, weight2_dim0 * weight2_dim1 * sizeof(float), cudaMemcpyHostToDevice);
    cudaMemcpy(d_bias, bias, output_dim * sizeof(float), cudaMemcpyHostToDevice);

    // Launch kernels
    dim3 threadsPerBlock(16, 16);
    dim3 numBlocks((output_dim + threadsPerBlock.x - 1) / threadsPerBlock.x,
                   (batch_size + threadsPerBlock.y - 1) / threadsPerBlock.y);

    matmul_hardtanh_kernel<<<numBlocks, threadsPerBlock>>>(
        d_input, d_weight1, d_output, batch_size, output_dim, input_dim, -2.0f, 2.0f);

    matmul_add_kernel<<<numBlocks, threadsPerBlock>>>(
        d_output, d_weight2, d_bias, d_output, batch_size, output_dim, weight2_dim1);

    // Copy result back to host
    cudaMemcpy(output, d_output, batch_size * output_dim * sizeof(float), cudaMemcpyDeviceToHost);

    // Free device memory
    cudaFree(d_input);
    cudaFree(d_weight1);
    cudaFree(d_weight2);
    cudaFree(d_bias);
    cudaFree(d_output);
}

}  // extern "C"

```