## func.py

```python
import torch

def my_function(input_tensor: torch.Tensor, weight: torch.Tensor, bias: torch.Tensor) -> torch.Tensor:
    """
    Performs a series of operations:
    1. Applies a linear transformation with the given weight and bias.
    2. Computes the logsumexp over the last dimension.
    3. Transposes the result using einsum.
    4. Applies a sigmoid activation.
    5. Returns the output in bfloat16 precision.
    """
    output = torch.matmul(input_tensor, weight.t()) + bias
    output = torch.logsumexp(output, dim=-1, keepdim=True)
    output = torch.einsum("ij,jk->ik", output, torch.eye(output.shape[1], dtype=torch.float32))
    output = torch.sigmoid(output)
    return output.to(torch.bfloat16)

function_signature = {
    "name": "my_function",
    "inputs": [
        ((4, 4), torch.float32),
        ((4, 4), torch.float32),
        ((4,), torch.float32)
    ],
    "outputs": [
        ((4, 4), torch.bfloat16),
    ]
}
```

## func.cu

```c++
#include <cuda_runtime.h>
#include <cuda_bf16.h>
#include <device_launch_parameters.h>
#include <stdarg.h>

// Helper function to convert float to __nv_bfloat16
__device__ __forceinline__ __nv_bfloat16 float_to_bfloat16(float f) {
    return __float2bfloat16(f);
}

// Helper function to convert __nv_bfloat16 to float
__device__ __forceinline__ float bfloat16_to_float(__nv_bfloat16 bf) {
    return __bfloat162float(bf);
}

// CUDA kernel for matrix multiplication
__global__ void matmul_kernel(const float* input_tensor, const float* weight, float* output, 
                                        int m, int n, int k) {
    int row = blockIdx.y * blockDim.y + threadIdx.y;
    int col = blockIdx.x * blockDim.x + threadIdx.x;
    
    if (row < m && col < n) {
        float sum = 0.0f;
        for (int i = 0; i < k; ++i) {
            sum += input_tensor[row * k + i] * weight[col * k + i];  // Transposed access
        }
        output[row * n + col] = sum;
    }
}

// CUDA kernel for logsumexp
__global__ void logsumexp_kernel(const float* input_tensor, float* output, int m, int n) {
    int row = blockIdx.y * blockDim.y + threadIdx.y;
    int col = blockIdx.x * blockDim.x + threadIdx.x;

    if (row < m && col < n) {
        float max_val = input_tensor[row * n + col];
        for (int i = 1; i < n; ++i) {
            max_val = fmaxf(max_val, input_tensor[row * n + col + i]);
        }
        float sum = 0.0f;
        for (int i = 0; i < n; ++i) {
            sum += expf(input_tensor[row * n + col + i] - max_val);
        }
        output[row * n + col] = logf(sum) + max_val;
    }
}

// CUDA kernel for sigmoid activation
__global__ void sigmoid_kernel(float* input_tensor, float* output, int m, int n) {
    int row = blockIdx.y * blockDim.y + threadIdx.y;
    int col = blockIdx.x * blockDim.x + threadIdx.x;

    if (row < m && col < n) {
        output[row * n + col] = 1.0f / (1.0f + expf(-input_tensor[row * n + col]));
    }
}

extern "C" {

void my_function(int num_args, ...) {
    va_list args;
    va_start(args, num_args);

    // Extract input tensor
    const float* input_tensor = va_arg(args, const float*);
    int input_tensor_dim0 = va_arg(args, int);
    int input_tensor_dim1 = va_arg(args, int);

    // Extract weight tensor
    const float* weight = va_arg(args, const float*);
    int weight_dim0 = va_arg(args, int);
    int weight_dim1 = va_arg(args, int);

    // Extract bias tensor
    const float* bias = va_arg(args, const float*);
    int bias_dim0 = va_arg(args, int);

    // Extract output tensor (assuming it's preallocated)
    __nv_bfloat16* output = va_arg(args, __nv_bfloat16*);

    va_end(args);

    int batch_size = input_tensor_dim0;
    int input_dim = input_tensor_dim1;
    int output_dim = weight_dim0;

    // Allocate device memory
    float *d_input, *d_weight, *d_bias, *d_output;
    cudaMalloc(&d_input, batch_size * input_dim * sizeof(float));
    cudaMalloc(&d_weight, output_dim * input_dim * sizeof(float));
    cudaMalloc(&d_bias, bias_dim0 * sizeof(float));
    cudaMalloc(&d_output, batch_size * output_dim * sizeof(float));

    // Copy input data to device
    cudaMemcpy(d_input, input_tensor, batch_size * input_dim * sizeof(float), cudaMemcpyHostToDevice);
    cudaMemcpy(d_weight, weight, output_dim * input_dim * sizeof(float), cudaMemcpyHostToDevice);
    cudaMemcpy(d_bias, bias, bias_dim0 * sizeof(float), cudaMemcpyHostToDevice);

    // Launch matrix multiplication kernel
    dim3 threadsPerBlock(16, 16);
    dim3 numBlocks((output_dim + threadsPerBlock.x - 1) / threadsPerBlock.x,
                   (batch_size + threadsPerBlock.y - 1) / threadsPerBlock.y);
    matmul_kernel<<<numBlocks, threadsPerBlock>>>(
        d_input, d_weight, d_output, batch_size, output_dim, input_dim
    );

    // Launch logsumexp kernel
    numBlocks = ((batch_size + threadsPerBlock.x - 1) / threadsPerBlock.x,
                   (output_dim + threadsPerBlock.y - 1) / threadsPerBlock.y);
    logsumexp_kernel<<<numBlocks, threadsPerBlock>>>(
        d_output, d_output, batch_size, output_dim
    );

    // Add bias
    for (int i = 0; i < batch_size; ++i) {
        for (int j = 0; j < output_dim; ++j) {
            d_output[i * output_dim + j] += d_bias[j];
        }
    }

    // Launch sigmoid kernel
    sigmoid_kernel<<<numBlocks, threadsPerBlock>>>(
        d_output, d_output, batch_size, output_dim
    );

    // Convert output to bfloat16
    for (int i = 0; i < batch_size * output_dim; ++i) {
        output[i] = float_to_bfloat16(d_output[i]);
    }

    // Copy output to host
    cudaMemcpy(output, d_output, batch_size * output_dim * sizeof(__nv_bfloat16), cudaMemcpyDeviceToHost);

    // Free device memory
    cudaFree(d_input);
    cudaFree(d_weight);
    cudaFree(d_bias);
    cudaFree(d_output);
}

} // extern "C"
```