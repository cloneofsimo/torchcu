```python
import torch

def scaled_dot_product_attention(query: torch.Tensor, key: torch.Tensor, value: torch.Tensor, mask: torch.Tensor = None) -> torch.Tensor:
    """
    Computes scaled dot-product attention.

    Args:
        query: A tensor of shape (batch_size, num_heads, seq_len, head_dim).
        key: A tensor of shape (batch_size, num_heads, seq_len, head_dim).
        value: A tensor of shape (batch_size, num_heads, seq_len, head_dim).
        mask: An optional tensor of shape (batch_size, 1, 1, seq_len) indicating
            which elements to attend to. 1 indicates attend, 0 indicates ignore.

    Returns:
        A tensor of shape (batch_size, num_heads, seq_len, head_dim) representing
        the attended values.
    """
    d_k = query.size(-1)
    scores = torch.matmul(query, key.transpose(-2, -1)) / torch.sqrt(torch.tensor(d_k, dtype=torch.float32))
    if mask is not None:
        scores = scores.masked_fill(mask == 0, -1e9)
    attention_weights = torch.softmax(scores, dim=-1)
    return torch.matmul(attention_weights, value)

function_signature = {
    "name": "scaled_dot_product_attention",
    "inputs": [
        ((1, 4, 16, 8), torch.float32),
        ((1, 4, 16, 8), torch.float32),
        ((1, 4, 16, 8), torch.float32)
    ],
    "outputs": [
        ((1, 4, 16, 8), torch.float32)
    ]
}
```

```c++
#include <cuda_runtime.h>
#include <device_launch_parameters.h>
#include <stdarg.h> 

// CUDA kernel for scaled dot-product attention
__global__ void scaled_dot_product_attention_kernel(const float* query, const float* key, const float* value, float* output, 
                                        int batch_size, int num_heads, int seq_len, int head_dim, const int* mask) {
    int b = blockIdx.x * blockDim.x + threadIdx.x;
    int h = blockIdx.y * blockDim.y + threadIdx.y;
    int s = threadIdx.z;

    if (b < batch_size && h < num_heads && s < seq_len) {
        int q_offset = b * num_heads * seq_len * head_dim + h * seq_len * head_dim + s * head_dim;
        int k_offset = q_offset;
        int v_offset = q_offset;
        
        float sum = 0.0f;
        for (int i = 0; i < seq_len; ++i) {
            float score = 0.0f;
            for (int j = 0; j < head_dim; ++j) {
                score += query[q_offset + j] * key[k_offset + i * head_dim + j];
            }
            score /= sqrt(head_dim);
            if (mask[s] == 0) {
                score = -INFINITY;
            }
            sum += exp(score) * value[v_offset + i * head_dim + j];
        }
        output[q_offset + j] = sum;
    }
}

extern "C" {

void scaled_dot_product_attention(int num_args, ...) {
    va_list args;
    va_start(args, num_args);

    // Extract input tensors
    const float* query = va_arg(args, const float*);
    int query_dim0 = va_arg(args, int);
    int query_dim1 = va_arg(args, int);
    int query_dim2 = va_arg(args, int);
    int query_dim3 = va_arg(args, int);

    const float* key = va_arg(args, const float*);
    int key_dim0 = va_arg(args, int);
    int key_dim1 = va_arg(args, int);
    int key_dim2 = va_arg(args, int);
    int key_dim3 = va_arg(args, int);

    const float* value = va_arg(args, const float*);
    int value_dim0 = va_arg(args, int);
    int value_dim1 = va_arg(args, int);
    int value_dim2 = va_arg(args, int);
    int value_dim3 = va_arg(args, int);

    // Extract mask (assuming it's preallocated)
    const int* mask = va_arg(args, const int*);
    int mask_dim0 = va_arg(args, int);
    int mask_dim1 = va_arg(args, int);
    int mask_dim2 = va_arg(args, int);
    int mask_dim3 = va_arg(args, int);

    // Extract output tensor (assuming it's preallocated)
    float* output = va_arg(args, float*);

    va_end(args);

    int batch_size = query_dim0;
    int num_heads = query_dim1;
    int seq_len = query_dim2;
    int head_dim = query_dim3;

    // Allocate device memory
    float *d_query, *d_key, *d_value, *d_output;
    int *d_mask;
    cudaMalloc(&d_query, batch_size * num_heads * seq_len * head_dim * sizeof(float));
    cudaMalloc(&d_key, batch_size * num_heads * seq_len * head_dim * sizeof(float));
    cudaMalloc(&d_value, batch_size * num_heads * seq_len * head_dim * sizeof(float));
    cudaMalloc(&d_output, batch_size * num_heads * seq_len * head_dim * sizeof(float));
    cudaMalloc(&d_mask, seq_len * sizeof(int)); 

    // Copy input data to device
    cudaMemcpy(d_query, query, batch_size * num_heads * seq_len * head_dim * sizeof(float), cudaMemcpyHostToDevice);
    cudaMemcpy(d_key, key, batch_size * num_heads * seq_len * head_dim * sizeof(float), cudaMemcpyHostToDevice);
    cudaMemcpy(d_value, value, batch_size * num_heads * seq_len * head_dim * sizeof(float), cudaMemcpyHostToDevice);
    cudaMemcpy(d_mask, mask, seq_len * sizeof(int), cudaMemcpyHostToDevice);

    // Launch kernel
    dim3 threadsPerBlock(16, 16, seq_len);  // Adjust block size for optimal performance
    dim3 numBlocks((batch_size + threadsPerBlock.x - 1) / threadsPerBlock.x,
                   (num_heads + threadsPerBlock.y - 1) / threadsPerBlock.y, 1);

    scaled_dot_product_attention_kernel<<<numBlocks, threadsPerBlock>>>(
        d_query, d_key, d_value, d_output, batch_size, num_heads, seq_len, head_dim, d_mask
    );

    // Copy result back to host
    cudaMemcpy(output, d_output, batch_size * num_heads * seq_len * head_dim * sizeof(float), cudaMemcpyDeviceToHost);

    // Free device memory
    cudaFree(d_query);
    cudaFree(d_key);
    cudaFree(d_value);
    cudaFree(d_output);
    cudaFree(d_mask); 
}

}  // extern "C"

```
