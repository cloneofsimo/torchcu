```python
import torch
import torch.nn.functional as F

def feature_extractor(input_tensor: torch.Tensor, weight: torch.Tensor, bias: torch.Tensor) -> torch.Tensor:
    """
    Applies a series of operations to extract features from an input tensor.

    1. Applies average pooling with a kernel size of 3.
    2. Calculates pairwise Chebyshev distance between the pooled features and a weight matrix.
    3. Applies a linear transformation with the provided weight and bias.
    """
    # Average pooling
    pooled = F.avg_pool2d(input_tensor, kernel_size=3)

    # Pairwise Chebyshev distance
    distances = torch.cdist(pooled.flatten(1), weight.flatten(1), p=float('inf'))

    # Linear transformation
    output = F.linear(distances, weight, bias)

    return output.to(torch.float16)  # Return output in fp16

function_signature = {
    "name": "feature_extractor",
    "inputs": [
        ((1, 3, 224, 224), torch.float32),
        ((1024, 9), torch.float32),
        ((1024,), torch.float32)
    ],
    "outputs": [
        ((1, 1024), torch.float16),
    ]
}
```

```c++
#include <cuda_runtime.h>
#include <cuda_fp16.h>
#include <device_launch_parameters.h>
#include <math.h>
#include <stdarg.h>

// Helper function to convert float to __half
__device__ __forceinline__ __half float_to_half(float f) {
    return __float2half_rn(f);
}

// Helper function to convert __half to float
__device__ __forceinline__ float half_to_float(__half h) {
    return __half2float(h);
}

// CUDA kernel for average pooling
__global__ void avg_pool2d_kernel(const float* input, float* output, int batch, int channels, int height, int width, int pool_size) {
    int row = blockIdx.y * blockDim.y + threadIdx.y;
    int col = blockIdx.x * blockDim.x + threadIdx.x;
    int batch_idx = blockIdx.z;

    if (row < height - pool_size + 1 && col < width - pool_size + 1) {
        float sum = 0.0f;
        for (int i = 0; i < pool_size; ++i) {
            for (int j = 0; j < pool_size; ++j) {
                sum += input[(batch_idx * channels * height * width) + (channels * (row + i) * width) + (col + j)];
            }
        }
        output[(batch_idx * channels * (height - pool_size + 1) * (width - pool_size + 1)) + (channels * row * (width - pool_size + 1)) + col] = sum / (pool_size * pool_size);
    }
}

// CUDA kernel for pairwise Chebyshev distance
__global__ void pairwise_chebyshev_distance_kernel(const float* pooled_features, const float* weight, float* distances, int batch, int pooled_features_dim, int weight_dim) {
    int row = blockIdx.y * blockDim.y + threadIdx.y;
    int col = blockIdx.x * blockDim.x + threadIdx.x;
    int batch_idx = blockIdx.z;

    if (row < pooled_features_dim && col < weight_dim) {
        float max_diff = 0.0f;
        for (int i = 0; i < pooled_features_dim; ++i) {
            float diff = fabsf(pooled_features[(batch_idx * pooled_features_dim) + i] - weight[(col * pooled_features_dim) + i]);
            max_diff = fmaxf(max_diff, diff);
        }
        distances[(batch_idx * weight_dim) + col] = max_diff;
    }
}

// CUDA kernel for linear transformation
__global__ void linear_kernel(const float* distances, const float* weight, const float* bias, __half* output, int batch, int weight_dim, int output_dim) {
    int row = blockIdx.y * blockDim.y + threadIdx.y;
    int col = blockIdx.x * blockDim.x + threadIdx.x;
    int batch_idx = blockIdx.z;

    if (row < batch && col < output_dim) {
        float sum = 0.0f;
        for (int i = 0; i < weight_dim; ++i) {
            sum += distances[(batch_idx * weight_dim) + i] * weight[(col * weight_dim) + i];
        }
        output[(batch_idx * output_dim) + col] = float_to_half(sum + bias[col]);
    }
}

extern "C" {

void feature_extractor(int num_args, ...) {
    va_list args;
    va_start(args, num_args);

    // Extract input tensor
    const float* input = va_arg(args, const float*);
    int batch = va_arg(args, int);
    int channels = va_arg(args, int);
    int height = va_arg(args, int);
    int width = va_arg(args, int);

    // Extract weight tensor
    const float* weight = va_arg(args, const float*);
    int weight_dim0 = va_arg(args, int);
    int weight_dim1 = va_arg(args, int);

    // Extract bias tensor
    const float* bias = va_arg(args, const float*);
    int bias_dim = va_arg(args, int);

    // Extract output tensor (assuming it's preallocated)
    __half* output = va_arg(args, __half*);

    va_end(args);

    // Pooling parameters
    const int pool_size = 3;

    // Allocate device memory
    float *d_input, *d_pooled, *d_distances;
    __half *d_output;
    cudaMalloc(&d_input, batch * channels * height * width * sizeof(float));
    cudaMalloc(&d_pooled, batch * channels * (height - pool_size + 1) * (width - pool_size + 1) * sizeof(float));
    cudaMalloc(&d_distances, batch * weight_dim1 * sizeof(float));
    cudaMalloc(&d_output, batch * weight_dim0 * sizeof(__half));

    // Copy input data to device
    cudaMemcpy(d_input, input, batch * channels * height * width * sizeof(float), cudaMemcpyHostToDevice);

    // Average pooling
    dim3 threadsPerBlock(16, 16);
    dim3 numBlocks((width - pool_size + 1 + threadsPerBlock.x - 1) / threadsPerBlock.x,
                   (height - pool_size + 1 + threadsPerBlock.y - 1) / threadsPerBlock.y, batch);
    avg_pool2d_kernel<<<numBlocks, threadsPerBlock>>>(d_input, d_pooled, batch, channels, height, width, pool_size);

    // Pairwise Chebyshev distance
    numBlocks = ((weight_dim1 + threadsPerBlock.x - 1) / threadsPerBlock.x,
                 (weight_dim0 + threadsPerBlock.y - 1) / threadsPerBlock.y, batch);
    pairwise_chebyshev_distance_kernel<<<numBlocks, threadsPerBlock>>>(d_pooled, weight, d_distances, batch, channels * (height - pool_size + 1) * (width - pool_size + 1), weight_dim1);

    // Linear transformation
    numBlocks = ((weight_dim0 + threadsPerBlock.x - 1) / threadsPerBlock.x,
                 (batch + threadsPerBlock.y - 1) / threadsPerBlock.y, 1);
    linear_kernel<<<numBlocks, threadsPerBlock>>>(d_distances, weight, bias, d_output, batch, weight_dim1, weight_dim0);

    // Copy result back to host
    cudaMemcpy(output, d_output, batch * weight_dim0 * sizeof(__half), cudaMemcpyDeviceToHost);

    // Free device memory
    cudaFree(d_input);
    cudaFree(d_pooled);
    cudaFree(d_distances);
    cudaFree(d_output);
}

}  // extern "C"
```