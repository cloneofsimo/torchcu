```python
import torch

def complex_transform_function(input_tensor: torch.Tensor, kernel: torch.Tensor) -> torch.Tensor:
    """
    Performs a complex transformation on the input tensor using a specified kernel.
    This involves:
    1. Reflecting the input tensor along the edges.
    2. Convolving the reflected input with the kernel using einsum_inner for efficiency.
    3. Converting the result to fp16 for reduced memory usage.
    4. Applying a custom activation function.
    5. Converting the result back to bf16 before returning.
    """
    # 1. Reflection padding
    input_padded = torch.nn.functional.pad(input_tensor, (kernel.shape[2] // 2, kernel.shape[2] // 2,
                                                        kernel.shape[1] // 2, kernel.shape[1] // 2),
                                         mode='reflect')

    # 2. Convolution using einsum_inner
    output = torch.einsum("bhw,khw->b(hw)", input_padded, kernel)

    # 3. Convert to fp16
    output = output.to(torch.float16)

    # 4. Custom activation function (example)
    output = torch.sigmoid(output)

    # 5. Convert to bf16 and return
    return output.to(torch.bfloat16)

function_signature = {
    "name": "complex_transform_function",
    "inputs": [
        ((1, 3, 10, 10), torch.float32),  # Input tensor
        ((3, 3, 3, 3), torch.float32)  # Kernel
    ],
    "outputs": [
        ((1, 3, 10, 10), torch.bfloat16),  # Output tensor
    ]
}
```

```c++
#include <cuda_runtime.h>
#include <cuda_bf16.h>
#include <device_launch_parameters.h>
#include <math.h>
#include <stdarg.h> 

// Helper functions for bfloat16 conversion
__device__ __forceinline__ __nv_bfloat16 float_to_bfloat16(float f) {
    return __float2bfloat16(f);
}

__device__ __forceinline__ float bfloat16_to_float(__nv_bfloat16 bf) {
    return __bfloat162float(bf);
}

// Helper function for reflection padding (assumes square kernel)
__global__ void reflect_padding_kernel(const float* input, float* output, 
                                       int batch_size, int channels, int height, int width, 
                                       int kernel_size) {
    int b = blockIdx.x * blockDim.x + threadIdx.x;
    int c = blockIdx.y * blockDim.y + threadIdx.y;
    int h = blockIdx.z * blockDim.z + threadIdx.z;
    int w = threadIdx.x;

    if (b < batch_size && c < channels && h < height && w < width) {
        int kernel_half = kernel_size / 2;

        int padded_h = h + kernel_half;
        int padded_w = w + kernel_half;

        // Reflection padding logic
        if (padded_h < kernel_half) {
            padded_h = kernel_half - padded_h - 1;
        } else if (padded_h >= height + kernel_half) {
            padded_h = 2 * (height + kernel_half - 1) - padded_h;
        }

        if (padded_w < kernel_half) {
            padded_w = kernel_half - padded_w - 1;
        } else if (padded_w >= width + kernel_half) {
            padded_w = 2 * (width + kernel_half - 1) - padded_w;
        }

        output[b * channels * height * width + c * height * width + h * width + w] = 
            input[b * channels * height * width + c * height * width + padded_h * width + padded_w];
    }
}

// Kernel for convolution using einsum_inner (optimized for shared memory)
__global__ void einsum_inner_conv_kernel(const float* input, const float* kernel, 
                                         __nv_bfloat16* output, int batch_size, int channels,
                                         int height, int width, int kernel_size) {
    int b = blockIdx.x * blockDim.x + threadIdx.x;
    int c = blockIdx.y * blockDim.y + threadIdx.y;
    int h = blockIdx.z * blockDim.z + threadIdx.z;
    int w = threadIdx.x;

    if (b < batch_size && c < channels && h < height && w < width) {
        __nv_bfloat16 sum = 0.0f;

        // Load kernel into shared memory
        __shared__ float shared_kernel[3 * 3 * 3];
        if (threadIdx.x < kernel_size * kernel_size * kernel_size) {
            shared_kernel[threadIdx.x] = kernel[c * kernel_size * kernel_size * kernel_size + threadIdx.x];
        }
        __syncthreads();

        // Compute einsum_inner
        for (int kh = 0; kh < kernel_size; ++kh) {
            for (int kw = 0; kw < kernel_size; ++kw) {
                int in_h = h + kh - kernel_size / 2;
                int in_w = w + kw - kernel_size / 2;

                if (in_h >= 0 && in_h < height && in_w >= 0 && in_w < width) {
                    for (int kc = 0; kc < kernel_size; ++kc) {
                        int kernel_idx = kc * kernel_size * kernel_size + kh * kernel_size + kw;
                        int input_idx = b * channels * height * width + c * height * width + in_h * width + in_w;
                        sum += float_to_bfloat16(input[input_idx] * shared_kernel[kernel_idx]);
                    }
                }
            }
        }

        output[b * channels * height * width + c * height * width + h * width + w] = sum;
    }
}

// Kernel for sigmoid activation (fp16)
__global__ void sigmoid_kernel(const __nv_bfloat16* input, __nv_bfloat16* output, 
                               int batch_size, int channels, int height, int width) {
    int b = blockIdx.x * blockDim.x + threadIdx.x;
    int c = blockIdx.y * blockDim.y + threadIdx.y;
    int h = blockIdx.z * blockDim.z + threadIdx.z;
    int w = threadIdx.x;

    if (b < batch_size && c < channels && h < height && w < width) {
        float val = bfloat16_to_float(input[b * channels * height * width + c * height * width + h * width + w]);
        output[b * channels * height * width + c * height * width + h * width + w] = 
            float_to_bfloat16(1.0f / (1.0f + expf(-val))); 
    }
}

extern "C" {

void complex_transform_function(int num_args, ...) {
    va_list args;
    va_start(args, num_args);

    // Extract input tensor
    const float* input_tensor = va_arg(args, const float*);
    int input_tensor_dim0 = va_arg(args, int);
    int input_tensor_dim1 = va_arg(args, int);
    int input_tensor_dim2 = va_arg(args, int);
    int input_tensor_dim3 = va_arg(args, int);

    // Extract kernel tensor
    const float* kernel = va_arg(args, const float*);
    int kernel_dim0 = va_arg(args, int);
    int kernel_dim1 = va_arg(args, int);
    int kernel_dim2 = va_arg(args, int);
    int kernel_dim3 = va_arg(args, int);

    // Extract output tensor (assuming it's preallocated)
    __nv_bfloat16* output = va_arg(args, __nv_bfloat16*);

    va_end(args);

    int batch_size = input_tensor_dim0;
    int channels = input_tensor_dim1;
    int height = input_tensor_dim2;
    int width = input_tensor_dim3;
    int kernel_size = kernel_dim2;

    // Allocate device memory
    float *d_input, *d_kernel, *d_input_padded;
    __nv_bfloat16 *d_output_fp16;
    cudaMalloc(&d_input, batch_size * channels * height * width * sizeof(float));
    cudaMalloc(&d_kernel, kernel_dim0 * kernel_dim1 * kernel_dim2 * kernel_dim3 * sizeof(float));
    cudaMalloc(&d_input_padded, batch_size * channels * (height + kernel_size - 1) * (width + kernel_size - 1) * sizeof(float));
    cudaMalloc(&d_output_fp16, batch_size * channels * height * width * sizeof(__nv_bfloat16));

    // Copy input data to device
    cudaMemcpy(d_input, input_tensor, batch_size * channels * height * width * sizeof(float), cudaMemcpyHostToDevice);
    cudaMemcpy(d_kernel, kernel, kernel_dim0 * kernel_dim1 * kernel_dim2 * kernel_dim3 * sizeof(float), cudaMemcpyHostToDevice);

    // Launch reflection padding kernel
    dim3 threadsPerBlock(width, 1, 1);
    dim3 numBlocks(1, channels, height);
    reflect_padding_kernel<<<numBlocks, threadsPerBlock>>>(
        d_input, d_input_padded, batch_size, channels, height, width, kernel_size
    );

    // Launch einsum_inner convolution kernel
    threadsPerBlock = dim3(width, 1, 1);
    numBlocks = dim3((batch_size + threadsPerBlock.x - 1) / threadsPerBlock.x, channels, height);
    einsum_inner_conv_kernel<<<numBlocks, threadsPerBlock>>>(
        d_input_padded, d_kernel, d_output_fp16, batch_size, channels, height, width, kernel_size
    );

    // Launch sigmoid activation kernel
    threadsPerBlock = dim3(width, 1, 1);
    numBlocks = dim3((batch_size + threadsPerBlock.x - 1) / threadsPerBlock.x, channels, height);
    sigmoid_kernel<<<numBlocks, threadsPerBlock>>>(d_output_fp16, d_output_fp16, batch_size, channels, height, width);

    // Copy result back to host
    cudaMemcpy(output, d_output_fp16, batch_size * channels * height * width * sizeof(__nv_bfloat16), cudaMemcpyDeviceToHost);

    // Free device memory
    cudaFree(d_input);
    cudaFree(d_kernel);
    cudaFree(d_input_padded);
    cudaFree(d_output_fp16);
}

}  // extern "C"
```

**func.py**

```python
import torch

def complex_transform_function(input_tensor: torch.Tensor, kernel: torch.Tensor) -> torch.Tensor:
    """
    Performs a complex transformation on the input tensor using a specified kernel.
    This involves:
    1. Reflecting the input tensor along the edges.
    2. Convolving the reflected input with the kernel using einsum_inner for efficiency.
    3. Converting the result to fp16 for reduced memory usage.
    4. Applying a custom activation function.
    5. Converting the result back to bf16 before returning.
    """
    # 1. Reflection padding
    input_padded = torch.nn.functional.pad(input_tensor, (kernel.shape[2] // 2, kernel.shape[2] // 2,
                                                        kernel.shape[1] // 2, kernel.shape[1] // 2),
                                         mode='reflect')

    # 2. Convolution using einsum_inner
    output = torch.einsum("bhw,khw->b(hw)", input_padded, kernel)

    # 3. Convert to fp16
    output = output.to(torch.float16)

    # 4. Custom activation function (example)
    output = torch.sigmoid(output)

    # 5. Convert to bf16 and return
    return output.to(torch.bfloat16)

function_signature = {
    "name": "complex_transform_function",
    "inputs": [
        ((1, 3, 10, 10), torch.float32),  # Input tensor
        ((3, 3, 3, 3), torch.float32)  # Kernel
    ],
    "outputs": [
        ((1, 3, 10, 10), torch.bfloat16),  # Output tensor
    ]
}
```

**func.cu**

```c++
#include <cuda_runtime.h>
#include <cuda_bf16.h>
#include <device_launch_parameters.h>
#include <math.h>
#include <stdarg.h> 

// Helper functions for bfloat16 conversion
__device__ __forceinline__ __nv_bfloat16 float_to_bfloat16(float f) {
    return __float2bfloat16(f);
}

__device__ __forceinline__ float bfloat16_to_float(__nv_bfloat16 bf) {
    return __bfloat162float(bf);
}

// Helper function for reflection padding (assumes square kernel)
__global__ void reflect_padding_kernel(const float* input, float* output, 
                                       int batch_size, int channels, int height, int width, 
                                       int kernel_size) {
    int b = blockIdx.x * blockDim.x + threadIdx.x;
    int c = blockIdx.y * blockDim.y + threadIdx.y;
    int h = blockIdx.z * blockDim.z + threadIdx.z;
    int w = threadIdx.x;

    if (b < batch_size && c < channels && h < height && w < width) {
        int kernel_half = kernel_size / 2;

        int padded_h = h + kernel_half;
        int padded_w = w + kernel_half;

        // Reflection padding logic
        if (padded_h < kernel_half) {
            padded_h = kernel_half - padded_h - 1;
        } else if (padded_h >= height + kernel_half) {
            padded_h = 2 * (height + kernel_half - 1) - padded_h;
        }

        if (padded_w < kernel_half) {
            padded_w = kernel_half - padded_w - 1;
        } else if (padded_w >= width + kernel_half) {
            padded_w = 2 * (width + kernel_half - 1) - padded_w;
        }

        output[b * channels * height * width + c * height * width + h * width + w] = 
            input[b * channels * height * width + c * height * width + padded_h * width + padded_w];
    }
}

// Kernel for convolution using einsum_inner (optimized for shared memory)
__global__ void einsum_inner_conv_kernel(const float* input, const float* kernel, 
                                         __nv_bfloat16* output, int batch_size, int channels,
                                         int height, int width, int kernel_size) {
    int b = blockIdx.x * blockDim.x + threadIdx.x;
    int c = blockIdx.y * blockDim.y + threadIdx.y;
    int h = blockIdx.z * blockDim.z + threadIdx.z;
    int w = threadIdx.x;

    if (b < batch_size && c < channels && h < height && w < width) {
        __nv_bfloat16 sum = 0.0f;

        // Load kernel into shared memory
        __shared__ float shared_kernel[3 * 3 * 3];
        if (threadIdx.x < kernel_size * kernel_size * kernel_size) {
            shared_kernel[threadIdx.x] = kernel[c * kernel_size * kernel_size * kernel_size + threadIdx.x];
        }
        __syncthreads();

        // Compute einsum_inner
        for (int kh = 0; kh < kernel_size; ++kh) {
            for (int kw = 0; kw < kernel_size; ++kw) {
                int in_h = h + kh - kernel_size / 2;
                int in_w = w + kw - kernel_size / 2;

                if (in_h >= 0 && in_h < height && in_w >= 0 && in_w < width) {
                    for (int kc = 0; kc < kernel_size; ++kc) {
                        int kernel_idx = kc * kernel_size * kernel_size + kh * kernel_size + kw;
                        int input_idx = b * channels * height * width + c * height * width + in_h * width + in_w;
                        sum += float_to_bfloat16(input[input_idx] * shared_kernel[kernel_idx]);
                    }
                }
            }
        }

        output[b * channels * height * width + c * height * width + h * width + w] = sum;
    }
}

// Kernel for sigmoid activation (fp16)
__global__ void sigmoid_kernel(const __nv_bfloat16* input, __nv_bfloat16* output, 
                               int batch_size, int channels, int height, int width) {
    int b = blockIdx.x * blockDim.x + threadIdx.x;
    int c = blockIdx.y * blockDim.y + threadIdx.y;
    int h = blockIdx.z * blockDim.z + threadIdx.z;
    int w = threadIdx.x;

    if (b < batch_size && c < channels && h < height && w < width) {
        float val = bfloat16_to_float(input[b * channels * height * width + c * height * width + h * width + w]);
        output[b * channels * height * width + c * height * width + h * width + w] = 
            float_to_bfloat16(1.0f / (1.0f + expf(-val))); 
    }
}

extern "C" {

void complex_transform_function(int num_args, ...) {
    va_list args;
    va_start(args, num_args);

    // Extract input tensor
    const float* input_tensor = va_arg(args, const float*);
    int input_tensor_dim0 = va_arg(args, int);
    int input_tensor_dim1 = va_arg(args, int);
    int input_tensor_dim2 = va_arg(args, int);
    int input_tensor_dim3 = va_arg(args, int);

    // Extract kernel tensor
    const float* kernel = va_arg(args, const float*);
    int kernel_dim0 = va_arg(args, int);
    int kernel_dim1 = va_arg(args, int);
    int kernel_dim2 = va_arg(args, int);
    int kernel_dim3 = va_arg(args, int);

    // Extract output tensor (assuming it's preallocated)
    __nv_bfloat16* output = va_arg(args, __nv_bfloat16*);

    va_end(args);

    int batch_size = input_tensor_dim0;
    int channels = input_tensor_dim1;
    int height = input_tensor_dim2;
    int width = input_tensor_dim3;
    int kernel_size = kernel_dim2;

    // Allocate device memory
    float *d_input, *d_kernel, *d_input_padded;
    __nv_bfloat16 *d_output_fp16;
    cudaMalloc(&d_input, batch_size * channels * height * width * sizeof(float));
    cudaMalloc(&d_kernel, kernel_dim0 * kernel_dim1 * kernel_dim2 * kernel_dim3 * sizeof(float));
    cudaMalloc(&d_input_padded, batch_size * channels * (height + kernel_size - 1) * (width + kernel_size - 1) * sizeof(float));
    cudaMalloc(&d_output_fp16, batch_size * channels * height * width * sizeof(__nv_bfloat16));

    // Copy input data to device
    cudaMemcpy(d_input, input_tensor, batch_size * channels * height * width * sizeof(float), cudaMemcpyHostToDevice);
    cudaMemcpy(d_kernel, kernel, kernel_dim0 * kernel_dim1 * kernel_dim2 * kernel_dim3 * sizeof(float), cudaMemcpyHostToDevice);

    // Launch reflection padding kernel
    dim3 threadsPerBlock(width, 1, 1);
    dim3 numBlocks(1, channels, height);
    reflect_padding_kernel<<<numBlocks, threadsPerBlock>>>(
        d_input, d_input_padded, batch_size, channels, height, width, kernel_size
    );

    // Launch einsum_inner convolution kernel
    threadsPerBlock = dim3(width, 1, 1);
    numBlocks = dim3((batch_size + threadsPerBlock.x - 1) / threadsPerBlock.x, channels, height);
    einsum_inner_conv_kernel<<<numBlocks, threadsPerBlock>>>(
        d_input_padded, d_kernel, d_output_fp16, batch_size, channels, height, width, kernel_size
    );

    // Launch sigmoid activation kernel
    threadsPerBlock = dim3(width, 1, 1);
    numBlocks = dim3((batch_size + threadsPerBlock.x - 1) / threadsPerBlock.x, channels, height);
    sigmoid_kernel<<<numBlocks, threadsPerBlock>>>(d_output_fp16, d_output_fp16, batch_size, channels, height, width);

    // Copy result back to host
    cudaMemcpy(output, d_output_fp16, batch_size * channels * height * width * sizeof(__nv_bfloat16), cudaMemcpyDeviceToHost);

    // Free device memory
    cudaFree(d_input);
    cudaFree(d_kernel);
    cudaFree(d_input_padded);
    cudaFree(d_output_fp16);
}

}  // extern "C"
```