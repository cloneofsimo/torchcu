```python
import torch

def gather_function(input_tensor: torch.Tensor, indices: torch.Tensor) -> torch.Tensor:
    """
    Gathers elements from input tensor based on indices.
    """
    return torch.gather(input_tensor, dim=1, index=indices)

function_signature = {
    "name": "gather_function",
    "inputs": [
        ((4, 4), torch.float32),
        ((4, 4), torch.int64),
    ],
    "outputs": [
        ((4, 4), torch.float32),
    ]
}
```

```c++
#include <cuda_runtime.h>
#include <device_launch_parameters.h>
#include <stdarg.h>  // Add this for va_list, va_start, va_end

// CUDA kernel for gathering elements
__global__ void gather_kernel(const float* input_tensor, const int* indices, float* output,
                               int batch_size, int input_dim) {
    int row = blockIdx.y * blockDim.y + threadIdx.y;
    int col = blockIdx.x * blockDim.x + threadIdx.x;

    if (row < batch_size && col < input_dim) {
        int idx = indices[row * input_dim + col];
        output[row * input_dim + col] = input_tensor[row * input_dim + idx];
    }
}

extern "C" {

void gather_function(int num_args, ...) {
    va_list args;
    va_start(args, num_args);

    // Extract input tensor
    const float* input_tensor = va_arg(args, const float*);
    int input_tensor_dim0 = va_arg(args, int);
    int input_tensor_dim1 = va_arg(args, int);

    // Extract indices tensor
    const int* indices = va_arg(args, const int*);
    int indices_dim0 = va_arg(args, int);
    int indices_dim1 = va_arg(args, int);

    // Extract output tensor (assuming it's preallocated)
    float* output = va_arg(args, float*);

    va_end(args);

    int batch_size = input_tensor_dim0;
    int input_dim = input_tensor_dim1;

    // Allocate device memory
    float *d_input, *d_output;
    int *d_indices;
    cudaMalloc(&d_input, batch_size * input_dim * sizeof(float));
    cudaMalloc(&d_indices, batch_size * input_dim * sizeof(int));
    cudaMalloc(&d_output, batch_size * input_dim * sizeof(float));

    // Copy input data to device
    cudaMemcpy(d_input, input_tensor, batch_size * input_dim * sizeof(float), cudaMemcpyHostToDevice);
    cudaMemcpy(d_indices, indices, batch_size * input_dim * sizeof(int), cudaMemcpyHostToDevice);

    // Launch kernel
    dim3 threadsPerBlock(16, 16);
    dim3 numBlocks((input_dim + threadsPerBlock.x - 1) / threadsPerBlock.x,
                   (batch_size + threadsPerBlock.y - 1) / threadsPerBlock.y);

    gather_kernel<<<numBlocks, threadsPerBlock>>>(
        d_input, d_indices, d_output, batch_size, input_dim
    );

    // Copy result back to host
    cudaMemcpy(output, d_output, batch_size * input_dim * sizeof(float), cudaMemcpyDeviceToHost);

    // Free device memory
    cudaFree(d_input);
    cudaFree(d_indices);
    cudaFree(d_output);
}

}  // extern "C"
```